#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Canon.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CanonConsolidatedReports")]
	public partial class CanonDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertUsersCategory(UsersCategory instance);
    partial void UpdateUsersCategory(UsersCategory instance);
    partial void DeleteUsersCategory(UsersCategory instance);
    partial void InsertEnum(Enum instance);
    partial void UpdateEnum(Enum instance);
    partial void DeleteEnum(Enum instance);
    partial void InsertEnumType(EnumType instance);
    partial void UpdateEnumType(EnumType instance);
    partial void DeleteEnumType(EnumType instance);
    partial void InsertLocalization(Localization instance);
    partial void UpdateLocalization(Localization instance);
    partial void DeleteLocalization(Localization instance);
    partial void InsertProductsRelevance(ProductsRelevance instance);
    partial void UpdateProductsRelevance(ProductsRelevance instance);
    partial void DeleteProductsRelevance(ProductsRelevance instance);
    partial void InsertRecommendedPrice(RecommendedPrice instance);
    partial void UpdateRecommendedPrice(RecommendedPrice instance);
    partial void DeleteRecommendedPrice(RecommendedPrice instance);
    partial void InsertUsersRight(UsersRight instance);
    partial void UpdateUsersRight(UsersRight instance);
    partial void DeleteUsersRight(UsersRight instance);
    partial void InsertMappingRule(MappingRule instance);
    partial void UpdateMappingRule(MappingRule instance);
    partial void DeleteMappingRule(MappingRule instance);
    partial void InsertCurrentRelevance(CurrentRelevance instance);
    partial void UpdateCurrentRelevance(CurrentRelevance instance);
    partial void DeleteCurrentRelevance(CurrentRelevance instance);
    partial void InsertExcluded(Excluded instance);
    partial void UpdateExcluded(Excluded instance);
    partial void DeleteExcluded(Excluded instance);
    partial void InsertImportLog(ImportLog instance);
    partial void UpdateImportLog(ImportLog instance);
    partial void DeleteImportLog(ImportLog instance);
    partial void InsertImportLogError(ImportLogError instance);
    partial void UpdateImportLogError(ImportLogError instance);
    partial void DeleteImportLogError(ImportLogError instance);
    partial void InsertProductsLog(ProductsLog instance);
    partial void UpdateProductsLog(ProductsLog instance);
    partial void DeleteProductsLog(ProductsLog instance);
    partial void InsertRecommendedLog(RecommendedLog instance);
    partial void UpdateRecommendedLog(RecommendedLog instance);
    partial void DeleteRecommendedLog(RecommendedLog instance);
    partial void InsertManualImportQueue(ManualImportQueue instance);
    partial void UpdateManualImportQueue(ManualImportQueue instance);
    partial void DeleteManualImportQueue(ManualImportQueue instance);
    partial void InsertManualImportSubscriber(ManualImportSubscriber instance);
    partial void UpdateManualImportSubscriber(ManualImportSubscriber instance);
    partial void DeleteManualImportSubscriber(ManualImportSubscriber instance);
    partial void InsertMainMonitor(MainMonitor instance);
    partial void UpdateMainMonitor(MainMonitor instance);
    partial void DeleteMainMonitor(MainMonitor instance);
    partial void InsertFeedProductException(FeedProductException instance);
    partial void UpdateFeedProductException(FeedProductException instance);
    partial void DeleteFeedProductException(FeedProductException instance);
    partial void InsertChannelMonitor(ChannelMonitor instance);
    partial void UpdateChannelMonitor(ChannelMonitor instance);
    partial void DeleteChannelMonitor(ChannelMonitor instance);
    partial void InsertChannel(Channel instance);
    partial void UpdateChannel(Channel instance);
    partial void DeleteChannel(Channel instance);
    partial void InsertDistributorType(DistributorType instance);
    partial void UpdateDistributorType(DistributorType instance);
    partial void DeleteDistributorType(DistributorType instance);
    partial void InsertImportDistributor(ImportDistributor instance);
    partial void UpdateImportDistributor(ImportDistributor instance);
    partial void DeleteImportDistributor(ImportDistributor instance);
    partial void InsertImportDistributorRecord(ImportDistributorRecord instance);
    partial void UpdateImportDistributorRecord(ImportDistributorRecord instance);
    partial void DeleteImportDistributorRecord(ImportDistributorRecord instance);
    partial void InsertImportPriceList(ImportPriceList instance);
    partial void UpdateImportPriceList(ImportPriceList instance);
    partial void DeleteImportPriceList(ImportPriceList instance);
    partial void InsertResellerGroup(ResellerGroup instance);
    partial void UpdateResellerGroup(ResellerGroup instance);
    partial void DeleteResellerGroup(ResellerGroup instance);
    partial void InsertReseller(Reseller instance);
    partial void UpdateReseller(Reseller instance);
    partial void DeleteReseller(Reseller instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertImportReseller(ImportReseller instance);
    partial void UpdateImportReseller(ImportReseller instance);
    partial void DeleteImportReseller(ImportReseller instance);
    partial void InsertProductGroup(ProductGroup instance);
    partial void UpdateProductGroup(ProductGroup instance);
    partial void DeleteProductGroup(ProductGroup instance);
    partial void InsertDistributor(Distributor instance);
    partial void UpdateDistributor(Distributor instance);
    partial void DeleteDistributor(Distributor instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertImportResellerRecord(ImportResellerRecord instance);
    partial void UpdateImportResellerRecord(ImportResellerRecord instance);
    partial void DeleteImportResellerRecord(ImportResellerRecord instance);
    partial void InsertProductType(ProductType instance);
    partial void UpdateProductType(ProductType instance);
    partial void DeleteProductType(ProductType instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertImportPriceListRecord(ImportPriceListRecord instance);
    partial void UpdateImportPriceListRecord(ImportPriceListRecord instance);
    partial void DeleteImportPriceListRecord(ImportPriceListRecord instance);
    #endregion
		
		public CanonDataContext() : 
				base(global::Canon.Data.Properties.Settings.Default.CanonConsolidatedReportsConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public CanonDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CanonDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CanonDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CanonDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<UsersCategory> UsersCategories
		{
			get
			{
				return this.GetTable<UsersCategory>();
			}
		}
		
		public System.Data.Linq.Table<Enum> Enums
		{
			get
			{
				return this.GetTable<Enum>();
			}
		}
		
		public System.Data.Linq.Table<EnumType> EnumTypes
		{
			get
			{
				return this.GetTable<EnumType>();
			}
		}
		
		public System.Data.Linq.Table<Localization> Localizations
		{
			get
			{
				return this.GetTable<Localization>();
			}
		}
		
		public System.Data.Linq.Table<ProductsRelevance> ProductsRelevances
		{
			get
			{
				return this.GetTable<ProductsRelevance>();
			}
		}
		
		public System.Data.Linq.Table<RecommendedPrice> RecommendedPrices
		{
			get
			{
				return this.GetTable<RecommendedPrice>();
			}
		}
		
		public System.Data.Linq.Table<UsersRight> UsersRights
		{
			get
			{
				return this.GetTable<UsersRight>();
			}
		}
		
		public System.Data.Linq.Table<MappingRule> MappingRules
		{
			get
			{
				return this.GetTable<MappingRule>();
			}
		}
		
		public System.Data.Linq.Table<CurrentRelevance> CurrentRelevances
		{
			get
			{
				return this.GetTable<CurrentRelevance>();
			}
		}
		
		public System.Data.Linq.Table<Excluded> Excludeds
		{
			get
			{
				return this.GetTable<Excluded>();
			}
		}
		
		public System.Data.Linq.Table<ImportLog> ImportLogs
		{
			get
			{
				return this.GetTable<ImportLog>();
			}
		}
		
		public System.Data.Linq.Table<ImportLogError> ImportLogErrors
		{
			get
			{
				return this.GetTable<ImportLogError>();
			}
		}
		
		public System.Data.Linq.Table<ProductsLog> ProductsLogs
		{
			get
			{
				return this.GetTable<ProductsLog>();
			}
		}
		
		public System.Data.Linq.Table<RecommendedLog> RecommendedLogs
		{
			get
			{
				return this.GetTable<RecommendedLog>();
			}
		}
		
		public System.Data.Linq.Table<ManualImportQueue> ManualImportQueues
		{
			get
			{
				return this.GetTable<ManualImportQueue>();
			}
		}
		
		public System.Data.Linq.Table<ManualImportSubscriber> ManualImportSubscribers
		{
			get
			{
				return this.GetTable<ManualImportSubscriber>();
			}
		}
		
		public System.Data.Linq.Table<MainMonitor> MainMonitors
		{
			get
			{
				return this.GetTable<MainMonitor>();
			}
		}
		
		public System.Data.Linq.Table<FeedProductException> FeedProductExceptions
		{
			get
			{
				return this.GetTable<FeedProductException>();
			}
		}
		
		public System.Data.Linq.Table<ChannelMonitor> ChannelMonitors
		{
			get
			{
				return this.GetTable<ChannelMonitor>();
			}
		}
		
		public System.Data.Linq.Table<Channel> Channels
		{
			get
			{
				return this.GetTable<Channel>();
			}
		}
		
		public System.Data.Linq.Table<DistributorType> DistributorTypes
		{
			get
			{
				return this.GetTable<DistributorType>();
			}
		}
		
		public System.Data.Linq.Table<ImportDistributor> ImportDistributors
		{
			get
			{
				return this.GetTable<ImportDistributor>();
			}
		}
		
		public System.Data.Linq.Table<ImportDistributorRecord> ImportDistributorRecords
		{
			get
			{
				return this.GetTable<ImportDistributorRecord>();
			}
		}
		
		public System.Data.Linq.Table<ImportPriceList> ImportPriceLists
		{
			get
			{
				return this.GetTable<ImportPriceList>();
			}
		}
		
		public System.Data.Linq.Table<ResellerGroup> ResellerGroups
		{
			get
			{
				return this.GetTable<ResellerGroup>();
			}
		}
		
		public System.Data.Linq.Table<Reseller> Resellers
		{
			get
			{
				return this.GetTable<Reseller>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<ImportReseller> ImportResellers
		{
			get
			{
				return this.GetTable<ImportReseller>();
			}
		}
		
		public System.Data.Linq.Table<ProductGroup> ProductGroups
		{
			get
			{
				return this.GetTable<ProductGroup>();
			}
		}
		
		public System.Data.Linq.Table<Distributor> Distributors
		{
			get
			{
				return this.GetTable<Distributor>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ImportResellerRecord> ImportResellerRecords
		{
			get
			{
				return this.GetTable<ImportResellerRecord>();
			}
		}
		
		public System.Data.Linq.Table<ProductType> ProductTypes
		{
			get
			{
				return this.GetTable<ProductType>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ImportPriceListRecord> ImportPriceListRecords
		{
			get
			{
				return this.GetTable<ImportPriceListRecord>();
			}
		}
		
		[Function(Name="dbo.CleanTodaysChannelMonitor")]
		public int CleanTodaysChannelMonitor([Parameter(DbType="Int")] System.Nullable<int> channel)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), channel);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.RecreateCurrentRelevanceForChannel")]
		public int RecreateCurrentRelevanceForChannel([Parameter(DbType="Int")] System.Nullable<int> channel)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), channel);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetBestRelevanceForMapping")]
		public ISingleResult<GetBestRelevanceForMappingResult> GetBestRelevanceForMapping([Parameter(DbType="Int")] System.Nullable<int> channel)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), channel);
			return ((ISingleResult<GetBestRelevanceForMappingResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.CreateNewMappingRulesForAll")]
		public int CreateNewMappingRulesForAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.UpdateMonitorValues")]
		public int UpdateMonitorValues([Parameter(DbType="Int")] System.Nullable<int> channelId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), channelId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetLastActualizationByChannel")]
		public ISingleResult<GetLastActualizationByChannelResult> GetLastActualizationByChannel([Parameter(DbType="Int")] System.Nullable<int> channel)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), channel);
			return ((ISingleResult<GetLastActualizationByChannelResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetProductImportLog")]
		public ISingleResult<GetProductImportLogResult> GetProductImportLog()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetProductImportLogResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetMainLogByDate")]
		public ISingleResult<GetMainLogByDateResult> GetMainLogByDate([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(DbType="Int")] System.Nullable<int> type)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, type);
			return ((ISingleResult<GetMainLogByDateResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetMappingByChannel")]
		public ISingleResult<GetMappingByChannelResult> GetMappingByChannel([Parameter(DbType="Int")] System.Nullable<int> channelId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), channelId);
			return ((ISingleResult<GetMappingByChannelResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetProductState", IsComposable=true)]
		public System.Nullable<int> GetProductState([Parameter(DbType="Int")] System.Nullable<int> channelId, [Parameter(DbType="Int")] System.Nullable<int> productId)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), channelId, productId).ReturnValue));
		}
		
		[Function(Name="dbo.GetManualMappingProducts")]
		public int GetManualMappingProducts([Parameter(DbType="Int")] System.Nullable<int> channelId, [Parameter(DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), channelId, productId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.MaintainDatabase")]
		public int MaintainDatabase()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _InternalId;
		
		private string _CategoryName;
		
		private EntitySet<UsersCategory> _UsersCategories;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnInternalIdChanging(string value);
    partial void OnInternalIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._UsersCategories = new EntitySet<UsersCategory>(new Action<UsersCategory>(this.attach_UsersCategories), new Action<UsersCategory>(this.detach_UsersCategories));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_InternalId", DbType="NVarChar(50)")]
		public string InternalId
		{
			get
			{
				return this._InternalId;
			}
			set
			{
				if ((this._InternalId != value))
				{
					this.OnInternalIdChanging(value);
					this.SendPropertyChanging();
					this._InternalId = value;
					this.SendPropertyChanged("InternalId");
					this.OnInternalIdChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Association(Name="Category_UsersCategory", Storage="_UsersCategories", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<UsersCategory> UsersCategories
		{
			get
			{
				return this._UsersCategories;
			}
			set
			{
				this._UsersCategories.Assign(value);
			}
		}
		
		[Association(Name="Category_Product", Storage="_Products", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersCategories(UsersCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_UsersCategories(UsersCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.UsersCategories")]
	public partial class UsersCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationId;
		
		private int _UserId;
		
		private int _CategoryId;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationIdChanging(int value);
    partial void OnRelationIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public UsersCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_RelationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationId
		{
			get
			{
				return this._RelationId;
			}
			set
			{
				if ((this._RelationId != value))
				{
					this.OnRelationIdChanging(value);
					this.SendPropertyChanging();
					this._RelationId = value;
					this.SendPropertyChanged("RelationId");
					this.OnRelationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Association(Name="Category_UsersCategory", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.UsersCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.UsersCategories.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="User_UsersCategory", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersCategories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersCategories.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Enums")]
	public partial class Enum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnumId;
		
		private int _EnumType;
		
		private string _NameCz;
		
		private string _NameEn;
		
		private EntitySet<UsersRight> _UsersRights;
		
		private EntitySet<ImportLog> _ImportLogs;
		
		private EntitySet<ImportLogError> _ImportLogErrors;
		
		private EntitySet<ProductsLog> _ProductsLogs;
		
		private EntitySet<RecommendedLog> _RecommendedLogs;
		
		private EntitySet<ManualImportQueue> _ManualImportQueues;
		
		private EntitySet<Channel> _Channels;
		
		private EntitySet<Channel> _Channels1;
		
		private EntityRef<EnumType> _EnumType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnumIdChanging(int value);
    partial void OnEnumIdChanged();
    partial void OnEnumTypeChanging(int value);
    partial void OnEnumTypeChanged();
    partial void OnNameCzChanging(string value);
    partial void OnNameCzChanged();
    partial void OnNameEnChanging(string value);
    partial void OnNameEnChanged();
    #endregion
		
		public Enum()
		{
			this._UsersRights = new EntitySet<UsersRight>(new Action<UsersRight>(this.attach_UsersRights), new Action<UsersRight>(this.detach_UsersRights));
			this._ImportLogs = new EntitySet<ImportLog>(new Action<ImportLog>(this.attach_ImportLogs), new Action<ImportLog>(this.detach_ImportLogs));
			this._ImportLogErrors = new EntitySet<ImportLogError>(new Action<ImportLogError>(this.attach_ImportLogErrors), new Action<ImportLogError>(this.detach_ImportLogErrors));
			this._ProductsLogs = new EntitySet<ProductsLog>(new Action<ProductsLog>(this.attach_ProductsLogs), new Action<ProductsLog>(this.detach_ProductsLogs));
			this._RecommendedLogs = new EntitySet<RecommendedLog>(new Action<RecommendedLog>(this.attach_RecommendedLogs), new Action<RecommendedLog>(this.detach_RecommendedLogs));
			this._ManualImportQueues = new EntitySet<ManualImportQueue>(new Action<ManualImportQueue>(this.attach_ManualImportQueues), new Action<ManualImportQueue>(this.detach_ManualImportQueues));
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			this._Channels1 = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels1), new Action<Channel>(this.detach_Channels1));
			this._EnumType1 = default(EntityRef<EnumType>);
			OnCreated();
		}
		
		[Column(Storage="_EnumId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnumId
		{
			get
			{
				return this._EnumId;
			}
			set
			{
				if ((this._EnumId != value))
				{
					this.OnEnumIdChanging(value);
					this.SendPropertyChanging();
					this._EnumId = value;
					this.SendPropertyChanged("EnumId");
					this.OnEnumIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnumType", DbType="Int NOT NULL")]
		public int EnumType
		{
			get
			{
				return this._EnumType;
			}
			set
			{
				if ((this._EnumType != value))
				{
					if (this._EnumType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnumTypeChanging(value);
					this.SendPropertyChanging();
					this._EnumType = value;
					this.SendPropertyChanged("EnumType");
					this.OnEnumTypeChanged();
				}
			}
		}
		
		[Column(Storage="_NameCz", DbType="NVarChar(50)")]
		public string NameCz
		{
			get
			{
				return this._NameCz;
			}
			set
			{
				if ((this._NameCz != value))
				{
					this.OnNameCzChanging(value);
					this.SendPropertyChanging();
					this._NameCz = value;
					this.SendPropertyChanged("NameCz");
					this.OnNameCzChanged();
				}
			}
		}
		
		[Column(Storage="_NameEn", DbType="NVarChar(50)")]
		public string NameEn
		{
			get
			{
				return this._NameEn;
			}
			set
			{
				if ((this._NameEn != value))
				{
					this.OnNameEnChanging(value);
					this.SendPropertyChanging();
					this._NameEn = value;
					this.SendPropertyChanged("NameEn");
					this.OnNameEnChanged();
				}
			}
		}
		
		[Association(Name="Enum_UsersRight", Storage="_UsersRights", ThisKey="EnumId", OtherKey="Rights")]
		public EntitySet<UsersRight> UsersRights
		{
			get
			{
				return this._UsersRights;
			}
			set
			{
				this._UsersRights.Assign(value);
			}
		}
		
		[Association(Name="Enum_ImportLog", Storage="_ImportLogs", ThisKey="EnumId", OtherKey="LogType")]
		public EntitySet<ImportLog> ImportLogs
		{
			get
			{
				return this._ImportLogs;
			}
			set
			{
				this._ImportLogs.Assign(value);
			}
		}
		
		[Association(Name="Enum_ImportLogError", Storage="_ImportLogErrors", ThisKey="EnumId", OtherKey="ErrorType")]
		public EntitySet<ImportLogError> ImportLogErrors
		{
			get
			{
				return this._ImportLogErrors;
			}
			set
			{
				this._ImportLogErrors.Assign(value);
			}
		}
		
		[Association(Name="Enum_ProductsLog", Storage="_ProductsLogs", ThisKey="EnumId", OtherKey="LogType")]
		public EntitySet<ProductsLog> ProductsLogs
		{
			get
			{
				return this._ProductsLogs;
			}
			set
			{
				this._ProductsLogs.Assign(value);
			}
		}
		
		[Association(Name="Enum_RecommendedLog", Storage="_RecommendedLogs", ThisKey="EnumId", OtherKey="LogType")]
		public EntitySet<RecommendedLog> RecommendedLogs
		{
			get
			{
				return this._RecommendedLogs;
			}
			set
			{
				this._RecommendedLogs.Assign(value);
			}
		}
		
		[Association(Name="Enum_ManualImportQueue", Storage="_ManualImportQueues", ThisKey="EnumId", OtherKey="Status")]
		public EntitySet<ManualImportQueue> ManualImportQueues
		{
			get
			{
				return this._ManualImportQueues;
			}
			set
			{
				this._ManualImportQueues.Assign(value);
			}
		}
		
		[Association(Name="Enum_Channel", Storage="_Channels", ThisKey="EnumId", OtherKey="ChannelType")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		[Association(Name="Enum_Channel1", Storage="_Channels1", ThisKey="EnumId", OtherKey="InfoType")]
		public EntitySet<Channel> Channels1
		{
			get
			{
				return this._Channels1;
			}
			set
			{
				this._Channels1.Assign(value);
			}
		}
		
		[Association(Name="EnumType_Enum", Storage="_EnumType1", ThisKey="EnumType", OtherKey="EnumTypeId", IsForeignKey=true)]
		public EnumType EnumType1
		{
			get
			{
				return this._EnumType1.Entity;
			}
			set
			{
				EnumType previousValue = this._EnumType1.Entity;
				if (((previousValue != value) 
							|| (this._EnumType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnumType1.Entity = null;
						previousValue.Enums.Remove(this);
					}
					this._EnumType1.Entity = value;
					if ((value != null))
					{
						value.Enums.Add(this);
						this._EnumType = value.EnumTypeId;
					}
					else
					{
						this._EnumType = default(int);
					}
					this.SendPropertyChanged("EnumType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersRights(UsersRight entity)
		{
			this.SendPropertyChanging();
			entity.Enum = this;
		}
		
		private void detach_UsersRights(UsersRight entity)
		{
			this.SendPropertyChanging();
			entity.Enum = null;
		}
		
		private void attach_ImportLogs(ImportLog entity)
		{
			this.SendPropertyChanging();
			entity.Enum = this;
		}
		
		private void detach_ImportLogs(ImportLog entity)
		{
			this.SendPropertyChanging();
			entity.Enum = null;
		}
		
		private void attach_ImportLogErrors(ImportLogError entity)
		{
			this.SendPropertyChanging();
			entity.Enum = this;
		}
		
		private void detach_ImportLogErrors(ImportLogError entity)
		{
			this.SendPropertyChanging();
			entity.Enum = null;
		}
		
		private void attach_ProductsLogs(ProductsLog entity)
		{
			this.SendPropertyChanging();
			entity.Enum = this;
		}
		
		private void detach_ProductsLogs(ProductsLog entity)
		{
			this.SendPropertyChanging();
			entity.Enum = null;
		}
		
		private void attach_RecommendedLogs(RecommendedLog entity)
		{
			this.SendPropertyChanging();
			entity.Enum = this;
		}
		
		private void detach_RecommendedLogs(RecommendedLog entity)
		{
			this.SendPropertyChanging();
			entity.Enum = null;
		}
		
		private void attach_ManualImportQueues(ManualImportQueue entity)
		{
			this.SendPropertyChanging();
			entity.Enum = this;
		}
		
		private void detach_ManualImportQueues(ManualImportQueue entity)
		{
			this.SendPropertyChanging();
			entity.Enum = null;
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Enum = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Enum = null;
		}
		
		private void attach_Channels1(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Enum1 = this;
		}
		
		private void detach_Channels1(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Enum1 = null;
		}
	}
	
	[Table(Name="dbo.EnumTypes")]
	public partial class EnumType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnumTypeId;
		
		private string _EnumTypeName;
		
		private EntitySet<Enum> _Enums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnumTypeIdChanging(int value);
    partial void OnEnumTypeIdChanged();
    partial void OnEnumTypeNameChanging(string value);
    partial void OnEnumTypeNameChanged();
    #endregion
		
		public EnumType()
		{
			this._Enums = new EntitySet<Enum>(new Action<Enum>(this.attach_Enums), new Action<Enum>(this.detach_Enums));
			OnCreated();
		}
		
		[Column(Storage="_EnumTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnumTypeId
		{
			get
			{
				return this._EnumTypeId;
			}
			set
			{
				if ((this._EnumTypeId != value))
				{
					this.OnEnumTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EnumTypeId = value;
					this.SendPropertyChanged("EnumTypeId");
					this.OnEnumTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnumTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EnumTypeName
		{
			get
			{
				return this._EnumTypeName;
			}
			set
			{
				if ((this._EnumTypeName != value))
				{
					this.OnEnumTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EnumTypeName = value;
					this.SendPropertyChanged("EnumTypeName");
					this.OnEnumTypeNameChanged();
				}
			}
		}
		
		[Association(Name="EnumType_Enum", Storage="_Enums", ThisKey="EnumTypeId", OtherKey="EnumType")]
		public EntitySet<Enum> Enums
		{
			get
			{
				return this._Enums;
			}
			set
			{
				this._Enums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enums(Enum entity)
		{
			this.SendPropertyChanging();
			entity.EnumType1 = this;
		}
		
		private void detach_Enums(Enum entity)
		{
			this.SendPropertyChanging();
			entity.EnumType1 = null;
		}
	}
	
	[Table(Name="dbo.Localizations")]
	public partial class Localization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk;
		
		private string _ResourceId;
		
		private string _Value;
		
		private string _LocaleId;
		
		private string _ResourceSet;
		
		private string _Type;
		
		private System.Data.Linq.Binary _BinFile;
		
		private string _TextFile;
		
		private string _Filename;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkChanging(int value);
    partial void OnpkChanged();
    partial void OnResourceIdChanging(string value);
    partial void OnResourceIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnLocaleIdChanging(string value);
    partial void OnLocaleIdChanged();
    partial void OnResourceSetChanging(string value);
    partial void OnResourceSetChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnBinFileChanging(System.Data.Linq.Binary value);
    partial void OnBinFileChanged();
    partial void OnTextFileChanging(string value);
    partial void OnTextFileChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    #endregion
		
		public Localization()
		{
			OnCreated();
		}
		
		[Column(Storage="_pk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pk
		{
			get
			{
				return this._pk;
			}
			set
			{
				if ((this._pk != value))
				{
					this.OnpkChanging(value);
					this.SendPropertyChanging();
					this._pk = value;
					this.SendPropertyChanged("pk");
					this.OnpkChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceId", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_LocaleId", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string LocaleId
		{
			get
			{
				return this._LocaleId;
			}
			set
			{
				if ((this._LocaleId != value))
				{
					this.OnLocaleIdChanging(value);
					this.SendPropertyChanging();
					this._LocaleId = value;
					this.SendPropertyChanged("LocaleId");
					this.OnLocaleIdChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceSet", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string ResourceSet
		{
			get
			{
				return this._ResourceSet;
			}
			set
			{
				if ((this._ResourceSet != value))
				{
					this.OnResourceSetChanging(value);
					this.SendPropertyChanging();
					this._ResourceSet = value;
					this.SendPropertyChanged("ResourceSet");
					this.OnResourceSetChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BinFile", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary BinFile
		{
			get
			{
				return this._BinFile;
			}
			set
			{
				if ((this._BinFile != value))
				{
					this.OnBinFileChanging(value);
					this.SendPropertyChanging();
					this._BinFile = value;
					this.SendPropertyChanged("BinFile");
					this.OnBinFileChanged();
				}
			}
		}
		
		[Column(Storage="_TextFile", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TextFile
		{
			get
			{
				return this._TextFile;
			}
			set
			{
				if ((this._TextFile != value))
				{
					this.OnTextFileChanging(value);
					this.SendPropertyChanging();
					this._TextFile = value;
					this.SendPropertyChanged("TextFile");
					this.OnTextFileChanged();
				}
			}
		}
		
		[Column(Storage="_Filename", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductsRelevance")]
	public partial class ProductsRelevance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelevanceId;
		
		private int _ProductId;
		
		private string _Word;
		
		private int _Points;
		
		private int _Max;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelevanceIdChanging(int value);
    partial void OnRelevanceIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnMaxChanging(int value);
    partial void OnMaxChanged();
    #endregion
		
		public ProductsRelevance()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_RelevanceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelevanceId
		{
			get
			{
				return this._RelevanceId;
			}
			set
			{
				if ((this._RelevanceId != value))
				{
					this.OnRelevanceIdChanging(value);
					this.SendPropertyChanging();
					this._RelevanceId = value;
					this.SendPropertyChanged("RelevanceId");
					this.OnRelevanceIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_Word", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[Column(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[Column(Storage="_Max", DbType="Int NOT NULL")]
		public int Max
		{
			get
			{
				return this._Max;
			}
			set
			{
				if ((this._Max != value))
				{
					this.OnMaxChanging(value);
					this.SendPropertyChanging();
					this._Max = value;
					this.SendPropertyChanged("Max");
					this.OnMaxChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductsRelevance", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductsRelevances.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductsRelevances.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RecommendedPrices")]
	public partial class RecommendedPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PriceId;
		
		private int _ProductId;
		
		private System.DateTime _ChangeDate;
		
		private int _UserId;
		
		private decimal _Price;
		
		private EntityRef<User> _User;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceIdChanging(int value);
    partial void OnPriceIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnChangeDateChanging(System.DateTime value);
    partial void OnChangeDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public RecommendedPrice()
		{
			this._User = default(EntityRef<User>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_PriceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PriceId
		{
			get
			{
				return this._PriceId;
			}
			set
			{
				if ((this._PriceId != value))
				{
					this.OnPriceIdChanging(value);
					this.SendPropertyChanging();
					this._PriceId = value;
					this.SendPropertyChanged("PriceId");
					this.OnPriceIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Association(Name="User_RecommendedPrice", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecommendedPrices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecommendedPrices.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Product_RecommendedPrice", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.RecommendedPrices.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.RecommendedPrices.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UsersRights")]
	public partial class UsersRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private int _UserId;
		
		private int _Rights;
		
		private EntityRef<Enum> _Enum;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRightsChanging(int value);
    partial void OnRightsChanged();
    #endregion
		
		public UsersRight()
		{
			this._Enum = default(EntityRef<Enum>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_RecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rights", DbType="Int NOT NULL")]
		public int Rights
		{
			get
			{
				return this._Rights;
			}
			set
			{
				if ((this._Rights != value))
				{
					if (this._Enum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRightsChanging(value);
					this.SendPropertyChanging();
					this._Rights = value;
					this.SendPropertyChanged("Rights");
					this.OnRightsChanged();
				}
			}
		}
		
		[Association(Name="Enum_UsersRight", Storage="_Enum", ThisKey="Rights", OtherKey="EnumId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Enum Enum
		{
			get
			{
				return this._Enum.Entity;
			}
			set
			{
				Enum previousValue = this._Enum.Entity;
				if (((previousValue != value) 
							|| (this._Enum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enum.Entity = null;
						previousValue.UsersRights.Remove(this);
					}
					this._Enum.Entity = value;
					if ((value != null))
					{
						value.UsersRights.Add(this);
						this._Rights = value.EnumId;
					}
					else
					{
						this._Rights = default(int);
					}
					this.SendPropertyChanged("Enum");
				}
			}
		}
		
		[Association(Name="User_UsersRight", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersRights.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersRights.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MappingRules")]
	public partial class MappingRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MapId;
		
		private int _ProductId;
		
		private int _ChannelId;
		
		private string _MonitoredName;
		
		private string _MonitoredUrl;
		
		private EntityRef<Channel> _Channel;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMapIdChanging(int value);
    partial void OnMapIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnChannelIdChanging(int value);
    partial void OnChannelIdChanged();
    partial void OnMonitoredNameChanging(string value);
    partial void OnMonitoredNameChanged();
    partial void OnMonitoredUrlChanging(string value);
    partial void OnMonitoredUrlChanged();
    #endregion
		
		public MappingRule()
		{
			this._Channel = default(EntityRef<Channel>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_MapId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MapId
		{
			get
			{
				return this._MapId;
			}
			set
			{
				if ((this._MapId != value))
				{
					this.OnMapIdChanging(value);
					this.SendPropertyChanging();
					this._MapId = value;
					this.SendPropertyChanged("MapId");
					this.OnMapIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int NOT NULL")]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_MonitoredName", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string MonitoredName
		{
			get
			{
				return this._MonitoredName;
			}
			set
			{
				if ((this._MonitoredName != value))
				{
					this.OnMonitoredNameChanging(value);
					this.SendPropertyChanging();
					this._MonitoredName = value;
					this.SendPropertyChanged("MonitoredName");
					this.OnMonitoredNameChanged();
				}
			}
		}
		
		[Column(Storage="_MonitoredUrl", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string MonitoredUrl
		{
			get
			{
				return this._MonitoredUrl;
			}
			set
			{
				if ((this._MonitoredUrl != value))
				{
					this.OnMonitoredUrlChanging(value);
					this.SendPropertyChanging();
					this._MonitoredUrl = value;
					this.SendPropertyChanged("MonitoredUrl");
					this.OnMonitoredUrlChanged();
				}
			}
		}
		
		[Association(Name="Channel_MappingRule", Storage="_Channel", ThisKey="ChannelId", OtherKey="ChannelId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.MappingRules.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.MappingRules.Add(this);
						this._ChannelId = value.ChannelId;
					}
					else
					{
						this._ChannelId = default(int);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		[Association(Name="Product_MappingRule", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.MappingRules.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.MappingRules.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CurrentRelevance")]
	public partial class CurrentRelevance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelId;
		
		private int _ProductId;
		
		private int _ChannelId;
		
		private int _ChannelMonitorId;
		
		private decimal _RelevancePercent;
		
		private System.Nullable<bool> _BestForMapping;
		
		private string _ProductName;
		
		private string _ProductUrl;
		
		private EntityRef<ChannelMonitor> _ChannelMonitor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelIdChanging(int value);
    partial void OnRelIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnChannelIdChanging(int value);
    partial void OnChannelIdChanged();
    partial void OnChannelMonitorIdChanging(int value);
    partial void OnChannelMonitorIdChanged();
    partial void OnRelevancePercentChanging(decimal value);
    partial void OnRelevancePercentChanged();
    partial void OnBestForMappingChanging(System.Nullable<bool> value);
    partial void OnBestForMappingChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductUrlChanging(string value);
    partial void OnProductUrlChanged();
    #endregion
		
		public CurrentRelevance()
		{
			this._ChannelMonitor = default(EntityRef<ChannelMonitor>);
			OnCreated();
		}
		
		[Column(Storage="_RelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelId
		{
			get
			{
				return this._RelId;
			}
			set
			{
				if ((this._RelId != value))
				{
					this.OnRelIdChanging(value);
					this.SendPropertyChanging();
					this._RelId = value;
					this.SendPropertyChanged("RelId");
					this.OnRelIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int NOT NULL")]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelMonitorId", DbType="Int NOT NULL")]
		public int ChannelMonitorId
		{
			get
			{
				return this._ChannelMonitorId;
			}
			set
			{
				if ((this._ChannelMonitorId != value))
				{
					if (this._ChannelMonitor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelMonitorIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelMonitorId = value;
					this.SendPropertyChanged("ChannelMonitorId");
					this.OnChannelMonitorIdChanged();
				}
			}
		}
		
		[Column(Storage="_RelevancePercent", DbType="Decimal(18,2) NOT NULL")]
		public decimal RelevancePercent
		{
			get
			{
				return this._RelevancePercent;
			}
			set
			{
				if ((this._RelevancePercent != value))
				{
					this.OnRelevancePercentChanging(value);
					this.SendPropertyChanging();
					this._RelevancePercent = value;
					this.SendPropertyChanged("RelevancePercent");
					this.OnRelevancePercentChanged();
				}
			}
		}
		
		[Column(Storage="_BestForMapping", DbType="Bit")]
		public System.Nullable<bool> BestForMapping
		{
			get
			{
				return this._BestForMapping;
			}
			set
			{
				if ((this._BestForMapping != value))
				{
					this.OnBestForMappingChanging(value);
					this.SendPropertyChanging();
					this._BestForMapping = value;
					this.SendPropertyChanged("BestForMapping");
					this.OnBestForMappingChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(1000)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductUrl", DbType="NVarChar(1000)")]
		public string ProductUrl
		{
			get
			{
				return this._ProductUrl;
			}
			set
			{
				if ((this._ProductUrl != value))
				{
					this.OnProductUrlChanging(value);
					this.SendPropertyChanging();
					this._ProductUrl = value;
					this.SendPropertyChanged("ProductUrl");
					this.OnProductUrlChanged();
				}
			}
		}
		
		[Association(Name="ChannelMonitor_CurrentRelevance", Storage="_ChannelMonitor", ThisKey="ChannelMonitorId", OtherKey="RecordId", IsForeignKey=true, DeleteRule="SET NULL")]
		public ChannelMonitor ChannelMonitor
		{
			get
			{
				return this._ChannelMonitor.Entity;
			}
			set
			{
				ChannelMonitor previousValue = this._ChannelMonitor.Entity;
				if (((previousValue != value) 
							|| (this._ChannelMonitor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChannelMonitor.Entity = null;
						previousValue.CurrentRelevances.Remove(this);
					}
					this._ChannelMonitor.Entity = value;
					if ((value != null))
					{
						value.CurrentRelevances.Add(this);
						this._ChannelMonitorId = value.RecordId;
					}
					else
					{
						this._ChannelMonitorId = default(int);
					}
					this.SendPropertyChanged("ChannelMonitor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Excluded")]
	public partial class Excluded : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExcId;
		
		private int _ProductId;
		
		private int _ChannelId;
		
		private EntityRef<Channel> _Channel;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExcIdChanging(int value);
    partial void OnExcIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnChannelIdChanging(int value);
    partial void OnChannelIdChanged();
    #endregion
		
		public Excluded()
		{
			this._Channel = default(EntityRef<Channel>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ExcId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExcId
		{
			get
			{
				return this._ExcId;
			}
			set
			{
				if ((this._ExcId != value))
				{
					this.OnExcIdChanging(value);
					this.SendPropertyChanging();
					this._ExcId = value;
					this.SendPropertyChanged("ExcId");
					this.OnExcIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int NOT NULL")]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Association(Name="Channel_Excluded", Storage="_Channel", ThisKey="ChannelId", OtherKey="ChannelId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.Excludeds.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.Excludeds.Add(this);
						this._ChannelId = value.ChannelId;
					}
					else
					{
						this._ChannelId = default(int);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		[Association(Name="Product_Excluded", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Excludeds.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Excludeds.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ImportLog")]
	public partial class ImportLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private int _ChannelId;
		
		private System.DateTime _LogDate;
		
		private System.Nullable<int> _Tryed;
		
		private System.Nullable<int> _Success;
		
		private int _LogType;
		
		private EntitySet<ImportLogError> _ImportLogErrors;
		
		private EntityRef<Enum> _Enum;
		
		private EntityRef<Channel> _Channel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnChannelIdChanging(int value);
    partial void OnChannelIdChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnTryedChanging(System.Nullable<int> value);
    partial void OnTryedChanged();
    partial void OnSuccessChanging(System.Nullable<int> value);
    partial void OnSuccessChanged();
    partial void OnLogTypeChanging(int value);
    partial void OnLogTypeChanged();
    #endregion
		
		public ImportLog()
		{
			this._ImportLogErrors = new EntitySet<ImportLogError>(new Action<ImportLogError>(this.attach_ImportLogErrors), new Action<ImportLogError>(this.detach_ImportLogErrors));
			this._Enum = default(EntityRef<Enum>);
			this._Channel = default(EntityRef<Channel>);
			OnCreated();
		}
		
		[Column(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int NOT NULL")]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_Tryed", DbType="Int")]
		public System.Nullable<int> Tryed
		{
			get
			{
				return this._Tryed;
			}
			set
			{
				if ((this._Tryed != value))
				{
					this.OnTryedChanging(value);
					this.SendPropertyChanging();
					this._Tryed = value;
					this.SendPropertyChanged("Tryed");
					this.OnTryedChanged();
				}
			}
		}
		
		[Column(Storage="_Success", DbType="Int")]
		public System.Nullable<int> Success
		{
			get
			{
				return this._Success;
			}
			set
			{
				if ((this._Success != value))
				{
					this.OnSuccessChanging(value);
					this.SendPropertyChanging();
					this._Success = value;
					this.SendPropertyChanged("Success");
					this.OnSuccessChanged();
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="Int NOT NULL")]
		public int LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					if (this._Enum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[Association(Name="ImportLog_ImportLogError", Storage="_ImportLogErrors", ThisKey="LogId", OtherKey="MainLogId")]
		public EntitySet<ImportLogError> ImportLogErrors
		{
			get
			{
				return this._ImportLogErrors;
			}
			set
			{
				this._ImportLogErrors.Assign(value);
			}
		}
		
		[Association(Name="Enum_ImportLog", Storage="_Enum", ThisKey="LogType", OtherKey="EnumId", IsForeignKey=true)]
		public Enum Enum
		{
			get
			{
				return this._Enum.Entity;
			}
			set
			{
				Enum previousValue = this._Enum.Entity;
				if (((previousValue != value) 
							|| (this._Enum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enum.Entity = null;
						previousValue.ImportLogs.Remove(this);
					}
					this._Enum.Entity = value;
					if ((value != null))
					{
						value.ImportLogs.Add(this);
						this._LogType = value.EnumId;
					}
					else
					{
						this._LogType = default(int);
					}
					this.SendPropertyChanged("Enum");
				}
			}
		}
		
		[Association(Name="Channel_ImportLog", Storage="_Channel", ThisKey="ChannelId", OtherKey="ChannelId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.ImportLogs.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.ImportLogs.Add(this);
						this._ChannelId = value.ChannelId;
					}
					else
					{
						this._ChannelId = default(int);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImportLogErrors(ImportLogError entity)
		{
			this.SendPropertyChanging();
			entity.ImportLog = this;
		}
		
		private void detach_ImportLogErrors(ImportLogError entity)
		{
			this.SendPropertyChanging();
			entity.ImportLog = null;
		}
	}
	
	[Table(Name="dbo.ImportLogErrors")]
	public partial class ImportLogError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorId;
		
		private int _MainLogId;
		
		private int _ErrorType;
		
		private string _ProductName;
		
		private EntityRef<Enum> _Enum;
		
		private EntityRef<ImportLog> _ImportLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIdChanging(int value);
    partial void OnErrorIdChanged();
    partial void OnMainLogIdChanging(int value);
    partial void OnMainLogIdChanged();
    partial void OnErrorTypeChanging(int value);
    partial void OnErrorTypeChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    #endregion
		
		public ImportLogError()
		{
			this._Enum = default(EntityRef<Enum>);
			this._ImportLog = default(EntityRef<ImportLog>);
			OnCreated();
		}
		
		[Column(Storage="_ErrorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorId
		{
			get
			{
				return this._ErrorId;
			}
			set
			{
				if ((this._ErrorId != value))
				{
					this.OnErrorIdChanging(value);
					this.SendPropertyChanging();
					this._ErrorId = value;
					this.SendPropertyChanged("ErrorId");
					this.OnErrorIdChanged();
				}
			}
		}
		
		[Column(Storage="_MainLogId", DbType="Int NOT NULL")]
		public int MainLogId
		{
			get
			{
				return this._MainLogId;
			}
			set
			{
				if ((this._MainLogId != value))
				{
					if (this._ImportLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainLogIdChanging(value);
					this.SendPropertyChanging();
					this._MainLogId = value;
					this.SendPropertyChanged("MainLogId");
					this.OnMainLogIdChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorType", DbType="Int NOT NULL")]
		public int ErrorType
		{
			get
			{
				return this._ErrorType;
			}
			set
			{
				if ((this._ErrorType != value))
				{
					if (this._Enum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnErrorTypeChanging(value);
					this.SendPropertyChanging();
					this._ErrorType = value;
					this.SendPropertyChanged("ErrorType");
					this.OnErrorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(300)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Association(Name="Enum_ImportLogError", Storage="_Enum", ThisKey="ErrorType", OtherKey="EnumId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Enum Enum
		{
			get
			{
				return this._Enum.Entity;
			}
			set
			{
				Enum previousValue = this._Enum.Entity;
				if (((previousValue != value) 
							|| (this._Enum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enum.Entity = null;
						previousValue.ImportLogErrors.Remove(this);
					}
					this._Enum.Entity = value;
					if ((value != null))
					{
						value.ImportLogErrors.Add(this);
						this._ErrorType = value.EnumId;
					}
					else
					{
						this._ErrorType = default(int);
					}
					this.SendPropertyChanged("Enum");
				}
			}
		}
		
		[Association(Name="ImportLog_ImportLogError", Storage="_ImportLog", ThisKey="MainLogId", OtherKey="LogId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ImportLog ImportLog
		{
			get
			{
				return this._ImportLog.Entity;
			}
			set
			{
				ImportLog previousValue = this._ImportLog.Entity;
				if (((previousValue != value) 
							|| (this._ImportLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImportLog.Entity = null;
						previousValue.ImportLogErrors.Remove(this);
					}
					this._ImportLog.Entity = value;
					if ((value != null))
					{
						value.ImportLogErrors.Add(this);
						this._MainLogId = value.LogId;
					}
					else
					{
						this._MainLogId = default(int);
					}
					this.SendPropertyChanged("ImportLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductsLog")]
	public partial class ProductsLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private int _ProductId;
		
		private System.Nullable<int> _ChannelId;
		
		private System.DateTime _LogDate;
		
		private int _LogType;
		
		private System.Nullable<int> _UserId;
		
		private string _LogParameter;
		
		private EntityRef<Enum> _Enum;
		
		private EntityRef<Channel> _Channel;
		
		private EntityRef<User> _User;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnChannelIdChanging(System.Nullable<int> value);
    partial void OnChannelIdChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnLogTypeChanging(int value);
    partial void OnLogTypeChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnLogParameterChanging(string value);
    partial void OnLogParameterChanged();
    #endregion
		
		public ProductsLog()
		{
			this._Enum = default(EntityRef<Enum>);
			this._Channel = default(EntityRef<Channel>);
			this._User = default(EntityRef<User>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_RecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int")]
		public System.Nullable<int> ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="Int NOT NULL")]
		public int LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					if (this._Enum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogParameter", DbType="NVarChar(50)")]
		public string LogParameter
		{
			get
			{
				return this._LogParameter;
			}
			set
			{
				if ((this._LogParameter != value))
				{
					this.OnLogParameterChanging(value);
					this.SendPropertyChanging();
					this._LogParameter = value;
					this.SendPropertyChanged("LogParameter");
					this.OnLogParameterChanged();
				}
			}
		}
		
		[Association(Name="Enum_ProductsLog", Storage="_Enum", ThisKey="LogType", OtherKey="EnumId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Enum Enum
		{
			get
			{
				return this._Enum.Entity;
			}
			set
			{
				Enum previousValue = this._Enum.Entity;
				if (((previousValue != value) 
							|| (this._Enum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enum.Entity = null;
						previousValue.ProductsLogs.Remove(this);
					}
					this._Enum.Entity = value;
					if ((value != null))
					{
						value.ProductsLogs.Add(this);
						this._LogType = value.EnumId;
					}
					else
					{
						this._LogType = default(int);
					}
					this.SendPropertyChanged("Enum");
				}
			}
		}
		
		[Association(Name="Channel_ProductsLog", Storage="_Channel", ThisKey="ChannelId", OtherKey="ChannelId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.ProductsLogs.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.ProductsLogs.Add(this);
						this._ChannelId = value.ChannelId;
					}
					else
					{
						this._ChannelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		[Association(Name="User_ProductsLog", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProductsLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProductsLogs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Product_ProductsLog", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductsLogs.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductsLogs.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RecommendedLog")]
	public partial class RecommendedLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private int _UserId;
		
		private int _ProductId;
		
		private System.DateTime _LogDate;
		
		private System.Nullable<System.DateTime> _RecomDate;
		
		private int _LogType;
		
		private decimal _Price;
		
		private EntityRef<Enum> _Enum;
		
		private EntityRef<User> _User;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnRecomDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecomDateChanged();
    partial void OnLogTypeChanging(int value);
    partial void OnLogTypeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public RecommendedLog()
		{
			this._Enum = default(EntityRef<Enum>);
			this._User = default(EntityRef<User>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_RecomDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RecomDate
		{
			get
			{
				return this._RecomDate;
			}
			set
			{
				if ((this._RecomDate != value))
				{
					this.OnRecomDateChanging(value);
					this.SendPropertyChanging();
					this._RecomDate = value;
					this.SendPropertyChanged("RecomDate");
					this.OnRecomDateChanged();
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="Int NOT NULL")]
		public int LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					if (this._Enum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Association(Name="Enum_RecommendedLog", Storage="_Enum", ThisKey="LogType", OtherKey="EnumId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Enum Enum
		{
			get
			{
				return this._Enum.Entity;
			}
			set
			{
				Enum previousValue = this._Enum.Entity;
				if (((previousValue != value) 
							|| (this._Enum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enum.Entity = null;
						previousValue.RecommendedLogs.Remove(this);
					}
					this._Enum.Entity = value;
					if ((value != null))
					{
						value.RecommendedLogs.Add(this);
						this._LogType = value.EnumId;
					}
					else
					{
						this._LogType = default(int);
					}
					this.SendPropertyChanged("Enum");
				}
			}
		}
		
		[Association(Name="User_RecommendedLog", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecommendedLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecommendedLogs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Product_RecommendedLog", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.RecommendedLogs.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.RecommendedLogs.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ManualImportQueue")]
	public partial class ManualImportQueue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private int _ChannelId;
		
		private int _UserId;
		
		private System.DateTime _PostDate;
		
		private int _Status;
		
		private EntitySet<ManualImportSubscriber> _ManualImportSubscribers;
		
		private EntityRef<Enum> _Enum;
		
		private EntityRef<Channel> _Channel;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnChannelIdChanging(int value);
    partial void OnChannelIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public ManualImportQueue()
		{
			this._ManualImportSubscribers = new EntitySet<ManualImportSubscriber>(new Action<ManualImportSubscriber>(this.attach_ManualImportSubscribers), new Action<ManualImportSubscriber>(this.detach_ManualImportSubscribers));
			this._Enum = default(EntityRef<Enum>);
			this._Channel = default(EntityRef<Channel>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_RecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int NOT NULL")]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._Enum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="ManualImportQueue_ManualImportSubscriber", Storage="_ManualImportSubscribers", ThisKey="RecordId", OtherKey="ManualImportId")]
		public EntitySet<ManualImportSubscriber> ManualImportSubscribers
		{
			get
			{
				return this._ManualImportSubscribers;
			}
			set
			{
				this._ManualImportSubscribers.Assign(value);
			}
		}
		
		[Association(Name="Enum_ManualImportQueue", Storage="_Enum", ThisKey="Status", OtherKey="EnumId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Enum Enum
		{
			get
			{
				return this._Enum.Entity;
			}
			set
			{
				Enum previousValue = this._Enum.Entity;
				if (((previousValue != value) 
							|| (this._Enum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enum.Entity = null;
						previousValue.ManualImportQueues.Remove(this);
					}
					this._Enum.Entity = value;
					if ((value != null))
					{
						value.ManualImportQueues.Add(this);
						this._Status = value.EnumId;
					}
					else
					{
						this._Status = default(int);
					}
					this.SendPropertyChanged("Enum");
				}
			}
		}
		
		[Association(Name="Channel_ManualImportQueue", Storage="_Channel", ThisKey="ChannelId", OtherKey="ChannelId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.ManualImportQueues.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.ManualImportQueues.Add(this);
						this._ChannelId = value.ChannelId;
					}
					else
					{
						this._ChannelId = default(int);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		[Association(Name="User_ManualImportQueue", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ManualImportQueues.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ManualImportQueues.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ManualImportSubscribers(ManualImportSubscriber entity)
		{
			this.SendPropertyChanging();
			entity.ManualImportQueue = this;
		}
		
		private void detach_ManualImportSubscribers(ManualImportSubscriber entity)
		{
			this.SendPropertyChanging();
			entity.ManualImportQueue = null;
		}
	}
	
	[Table(Name="dbo.ManualImportSubscribers")]
	public partial class ManualImportSubscriber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private int _ManualImportId;
		
		private int _UserId;
		
		private System.DateTime _SubscriptDate;
		
		private EntityRef<ManualImportQueue> _ManualImportQueue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnManualImportIdChanging(int value);
    partial void OnManualImportIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSubscriptDateChanging(System.DateTime value);
    partial void OnSubscriptDateChanged();
    #endregion
		
		public ManualImportSubscriber()
		{
			this._ManualImportQueue = default(EntityRef<ManualImportQueue>);
			OnCreated();
		}
		
		[Column(Storage="_RecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[Column(Storage="_ManualImportId", DbType="Int NOT NULL")]
		public int ManualImportId
		{
			get
			{
				return this._ManualImportId;
			}
			set
			{
				if ((this._ManualImportId != value))
				{
					if (this._ManualImportQueue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManualImportIdChanging(value);
					this.SendPropertyChanging();
					this._ManualImportId = value;
					this.SendPropertyChanged("ManualImportId");
					this.OnManualImportIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubscriptDate
		{
			get
			{
				return this._SubscriptDate;
			}
			set
			{
				if ((this._SubscriptDate != value))
				{
					this.OnSubscriptDateChanging(value);
					this.SendPropertyChanging();
					this._SubscriptDate = value;
					this.SendPropertyChanged("SubscriptDate");
					this.OnSubscriptDateChanged();
				}
			}
		}
		
		[Association(Name="ManualImportQueue_ManualImportSubscriber", Storage="_ManualImportQueue", ThisKey="ManualImportId", OtherKey="RecordId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ManualImportQueue ManualImportQueue
		{
			get
			{
				return this._ManualImportQueue.Entity;
			}
			set
			{
				ManualImportQueue previousValue = this._ManualImportQueue.Entity;
				if (((previousValue != value) 
							|| (this._ManualImportQueue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManualImportQueue.Entity = null;
						previousValue.ManualImportSubscribers.Remove(this);
					}
					this._ManualImportQueue.Entity = value;
					if ((value != null))
					{
						value.ManualImportSubscribers.Add(this);
						this._ManualImportId = value.RecordId;
					}
					else
					{
						this._ManualImportId = default(int);
					}
					this.SendPropertyChanged("ManualImportQueue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MainMonitor")]
	public partial class MainMonitor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private int _ProductId;
		
		private int _ChannelId;
		
		private System.Nullable<int> _ChannelMonitorId;
		
		private System.DateTime _CalcDate;
		
		private decimal _RecommendedPrice;
		
		private decimal _ChannelPrice;
		
		private decimal _Difference;
		
		private EntityRef<ChannelMonitor> _ChannelMonitor;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnChannelIdChanging(int value);
    partial void OnChannelIdChanged();
    partial void OnChannelMonitorIdChanging(System.Nullable<int> value);
    partial void OnChannelMonitorIdChanged();
    partial void OnCalcDateChanging(System.DateTime value);
    partial void OnCalcDateChanged();
    partial void OnRecommendedPriceChanging(decimal value);
    partial void OnRecommendedPriceChanged();
    partial void OnChannelPriceChanging(decimal value);
    partial void OnChannelPriceChanged();
    partial void OnDifferenceChanging(decimal value);
    partial void OnDifferenceChanged();
    #endregion
		
		public MainMonitor()
		{
			this._ChannelMonitor = default(EntityRef<ChannelMonitor>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_RecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int NOT NULL")]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelMonitorId", DbType="Int")]
		public System.Nullable<int> ChannelMonitorId
		{
			get
			{
				return this._ChannelMonitorId;
			}
			set
			{
				if ((this._ChannelMonitorId != value))
				{
					if (this._ChannelMonitor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelMonitorIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelMonitorId = value;
					this.SendPropertyChanged("ChannelMonitorId");
					this.OnChannelMonitorIdChanged();
				}
			}
		}
		
		[Column(Storage="_CalcDate", DbType="DateTime NOT NULL")]
		public System.DateTime CalcDate
		{
			get
			{
				return this._CalcDate;
			}
			set
			{
				if ((this._CalcDate != value))
				{
					this.OnCalcDateChanging(value);
					this.SendPropertyChanging();
					this._CalcDate = value;
					this.SendPropertyChanged("CalcDate");
					this.OnCalcDateChanged();
				}
			}
		}
		
		[Column(Storage="_RecommendedPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal RecommendedPrice
		{
			get
			{
				return this._RecommendedPrice;
			}
			set
			{
				if ((this._RecommendedPrice != value))
				{
					this.OnRecommendedPriceChanging(value);
					this.SendPropertyChanging();
					this._RecommendedPrice = value;
					this.SendPropertyChanged("RecommendedPrice");
					this.OnRecommendedPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal ChannelPrice
		{
			get
			{
				return this._ChannelPrice;
			}
			set
			{
				if ((this._ChannelPrice != value))
				{
					this.OnChannelPriceChanging(value);
					this.SendPropertyChanging();
					this._ChannelPrice = value;
					this.SendPropertyChanged("ChannelPrice");
					this.OnChannelPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Difference", DbType="Decimal(18,2) NOT NULL")]
		public decimal Difference
		{
			get
			{
				return this._Difference;
			}
			set
			{
				if ((this._Difference != value))
				{
					this.OnDifferenceChanging(value);
					this.SendPropertyChanging();
					this._Difference = value;
					this.SendPropertyChanged("Difference");
					this.OnDifferenceChanged();
				}
			}
		}
		
		[Association(Name="ChannelMonitor_MainMonitor", Storage="_ChannelMonitor", ThisKey="ChannelMonitorId", OtherKey="RecordId", IsForeignKey=true, DeleteRule="SET NULL")]
		public ChannelMonitor ChannelMonitor
		{
			get
			{
				return this._ChannelMonitor.Entity;
			}
			set
			{
				ChannelMonitor previousValue = this._ChannelMonitor.Entity;
				if (((previousValue != value) 
							|| (this._ChannelMonitor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChannelMonitor.Entity = null;
						previousValue.MainMonitors.Remove(this);
					}
					this._ChannelMonitor.Entity = value;
					if ((value != null))
					{
						value.MainMonitors.Add(this);
						this._ChannelMonitorId = value.RecordId;
					}
					else
					{
						this._ChannelMonitorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChannelMonitor");
				}
			}
		}
		
		[Association(Name="Product_MainMonitor", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.MainMonitors.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.MainMonitors.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FeedProductExceptions")]
	public partial class FeedProductException : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExceptionId;
		
		private string _StopWord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExceptionIdChanging(int value);
    partial void OnExceptionIdChanged();
    partial void OnStopWordChanging(string value);
    partial void OnStopWordChanged();
    #endregion
		
		public FeedProductException()
		{
			OnCreated();
		}
		
		[Column(Storage="_ExceptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExceptionId
		{
			get
			{
				return this._ExceptionId;
			}
			set
			{
				if ((this._ExceptionId != value))
				{
					this.OnExceptionIdChanging(value);
					this.SendPropertyChanging();
					this._ExceptionId = value;
					this.SendPropertyChanged("ExceptionId");
					this.OnExceptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_StopWord", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StopWord
		{
			get
			{
				return this._StopWord;
			}
			set
			{
				if ((this._StopWord != value))
				{
					this.OnStopWordChanging(value);
					this.SendPropertyChanging();
					this._StopWord = value;
					this.SendPropertyChanged("StopWord");
					this.OnStopWordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ChannelMonitor")]
	public partial class ChannelMonitor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private int _ChannelId;
		
		private System.Nullable<int> _ProductId;
		
		private System.DateTime _ImportDate;
		
		private string _ProductName;
		
		private string _ProductDesc;
		
		private string _ProductUrl;
		
		private decimal _Price;
		
		private decimal _PriceVat;
		
		private decimal _Vat;
		
		private EntitySet<CurrentRelevance> _CurrentRelevances;
		
		private EntitySet<MainMonitor> _MainMonitors;
		
		private EntityRef<Channel> _Channel;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnChannelIdChanging(int value);
    partial void OnChannelIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnImportDateChanging(System.DateTime value);
    partial void OnImportDateChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductDescChanging(string value);
    partial void OnProductDescChanged();
    partial void OnProductUrlChanging(string value);
    partial void OnProductUrlChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPriceVatChanging(decimal value);
    partial void OnPriceVatChanged();
    partial void OnVatChanging(decimal value);
    partial void OnVatChanged();
    #endregion
		
		public ChannelMonitor()
		{
			this._CurrentRelevances = new EntitySet<CurrentRelevance>(new Action<CurrentRelevance>(this.attach_CurrentRelevances), new Action<CurrentRelevance>(this.detach_CurrentRelevances));
			this._MainMonitors = new EntitySet<MainMonitor>(new Action<MainMonitor>(this.attach_MainMonitors), new Action<MainMonitor>(this.detach_MainMonitors));
			this._Channel = default(EntityRef<Channel>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_RecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int NOT NULL")]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ImportDate", DbType="DateTime NOT NULL")]
		public System.DateTime ImportDate
		{
			get
			{
				return this._ImportDate;
			}
			set
			{
				if ((this._ImportDate != value))
				{
					this.OnImportDateChanging(value);
					this.SendPropertyChanging();
					this._ImportDate = value;
					this.SendPropertyChanged("ImportDate");
					this.OnImportDateChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductDesc", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string ProductDesc
		{
			get
			{
				return this._ProductDesc;
			}
			set
			{
				if ((this._ProductDesc != value))
				{
					this.OnProductDescChanging(value);
					this.SendPropertyChanging();
					this._ProductDesc = value;
					this.SendPropertyChanged("ProductDesc");
					this.OnProductDescChanged();
				}
			}
		}
		
		[Column(Storage="_ProductUrl", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string ProductUrl
		{
			get
			{
				return this._ProductUrl;
			}
			set
			{
				if ((this._ProductUrl != value))
				{
					this.OnProductUrlChanging(value);
					this.SendPropertyChanging();
					this._ProductUrl = value;
					this.SendPropertyChanged("ProductUrl");
					this.OnProductUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_PriceVat", DbType="Decimal(18,2) NOT NULL")]
		public decimal PriceVat
		{
			get
			{
				return this._PriceVat;
			}
			set
			{
				if ((this._PriceVat != value))
				{
					this.OnPriceVatChanging(value);
					this.SendPropertyChanging();
					this._PriceVat = value;
					this.SendPropertyChanged("PriceVat");
					this.OnPriceVatChanged();
				}
			}
		}
		
		[Column(Storage="_Vat", DbType="Decimal(18,2) NOT NULL")]
		public decimal Vat
		{
			get
			{
				return this._Vat;
			}
			set
			{
				if ((this._Vat != value))
				{
					this.OnVatChanging(value);
					this.SendPropertyChanging();
					this._Vat = value;
					this.SendPropertyChanged("Vat");
					this.OnVatChanged();
				}
			}
		}
		
		[Association(Name="ChannelMonitor_CurrentRelevance", Storage="_CurrentRelevances", ThisKey="RecordId", OtherKey="ChannelMonitorId")]
		public EntitySet<CurrentRelevance> CurrentRelevances
		{
			get
			{
				return this._CurrentRelevances;
			}
			set
			{
				this._CurrentRelevances.Assign(value);
			}
		}
		
		[Association(Name="ChannelMonitor_MainMonitor", Storage="_MainMonitors", ThisKey="RecordId", OtherKey="ChannelMonitorId")]
		public EntitySet<MainMonitor> MainMonitors
		{
			get
			{
				return this._MainMonitors;
			}
			set
			{
				this._MainMonitors.Assign(value);
			}
		}
		
		[Association(Name="Channel_ChannelMonitor", Storage="_Channel", ThisKey="ChannelId", OtherKey="ChannelId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.ChannelMonitors.Remove(this);
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.ChannelMonitors.Add(this);
						this._ChannelId = value.ChannelId;
					}
					else
					{
						this._ChannelId = default(int);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		[Association(Name="Product_ChannelMonitor", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ChannelMonitors.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ChannelMonitors.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CurrentRelevances(CurrentRelevance entity)
		{
			this.SendPropertyChanging();
			entity.ChannelMonitor = this;
		}
		
		private void detach_CurrentRelevances(CurrentRelevance entity)
		{
			this.SendPropertyChanging();
			entity.ChannelMonitor = null;
		}
		
		private void attach_MainMonitors(MainMonitor entity)
		{
			this.SendPropertyChanging();
			entity.ChannelMonitor = this;
		}
		
		private void detach_MainMonitors(MainMonitor entity)
		{
			this.SendPropertyChanging();
			entity.ChannelMonitor = null;
		}
	}
	
	[Table(Name="dbo.Channels")]
	public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChannelId;
		
		private string _ChannelName;
		
		private int _ChannelType;
		
		private string _Url;
		
		private int _InfoType;
		
		private bool _IsActive;
		
		private string _AdditionalCommand;
		
		private string _ReportingTo;
		
		private EntitySet<MappingRule> _MappingRules;
		
		private EntitySet<Excluded> _Excludeds;
		
		private EntitySet<ImportLog> _ImportLogs;
		
		private EntitySet<ProductsLog> _ProductsLogs;
		
		private EntitySet<ManualImportQueue> _ManualImportQueues;
		
		private EntitySet<ChannelMonitor> _ChannelMonitors;
		
		private EntityRef<Enum> _Enum;
		
		private EntityRef<Enum> _Enum1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelIdChanging(int value);
    partial void OnChannelIdChanged();
    partial void OnChannelNameChanging(string value);
    partial void OnChannelNameChanged();
    partial void OnChannelTypeChanging(int value);
    partial void OnChannelTypeChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnInfoTypeChanging(int value);
    partial void OnInfoTypeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnAdditionalCommandChanging(string value);
    partial void OnAdditionalCommandChanged();
    partial void OnReportingToChanging(string value);
    partial void OnReportingToChanged();
    #endregion
		
		public Channel()
		{
			this._MappingRules = new EntitySet<MappingRule>(new Action<MappingRule>(this.attach_MappingRules), new Action<MappingRule>(this.detach_MappingRules));
			this._Excludeds = new EntitySet<Excluded>(new Action<Excluded>(this.attach_Excludeds), new Action<Excluded>(this.detach_Excludeds));
			this._ImportLogs = new EntitySet<ImportLog>(new Action<ImportLog>(this.attach_ImportLogs), new Action<ImportLog>(this.detach_ImportLogs));
			this._ProductsLogs = new EntitySet<ProductsLog>(new Action<ProductsLog>(this.attach_ProductsLogs), new Action<ProductsLog>(this.detach_ProductsLogs));
			this._ManualImportQueues = new EntitySet<ManualImportQueue>(new Action<ManualImportQueue>(this.attach_ManualImportQueues), new Action<ManualImportQueue>(this.detach_ManualImportQueues));
			this._ChannelMonitors = new EntitySet<ChannelMonitor>(new Action<ChannelMonitor>(this.attach_ChannelMonitors), new Action<ChannelMonitor>(this.detach_ChannelMonitors));
			this._Enum = default(EntityRef<Enum>);
			this._Enum1 = default(EntityRef<Enum>);
			OnCreated();
		}
		
		[Column(Storage="_ChannelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChannelName
		{
			get
			{
				return this._ChannelName;
			}
			set
			{
				if ((this._ChannelName != value))
				{
					this.OnChannelNameChanging(value);
					this.SendPropertyChanging();
					this._ChannelName = value;
					this.SendPropertyChanged("ChannelName");
					this.OnChannelNameChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelType", DbType="Int NOT NULL")]
		public int ChannelType
		{
			get
			{
				return this._ChannelType;
			}
			set
			{
				if ((this._ChannelType != value))
				{
					if (this._Enum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelTypeChanging(value);
					this.SendPropertyChanging();
					this._ChannelType = value;
					this.SendPropertyChanged("ChannelType");
					this.OnChannelTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_InfoType", DbType="Int NOT NULL")]
		public int InfoType
		{
			get
			{
				return this._InfoType;
			}
			set
			{
				if ((this._InfoType != value))
				{
					if (this._Enum1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInfoTypeChanging(value);
					this.SendPropertyChanging();
					this._InfoType = value;
					this.SendPropertyChanged("InfoType");
					this.OnInfoTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalCommand", DbType="NChar(500)")]
		public string AdditionalCommand
		{
			get
			{
				return this._AdditionalCommand;
			}
			set
			{
				if ((this._AdditionalCommand != value))
				{
					this.OnAdditionalCommandChanging(value);
					this.SendPropertyChanging();
					this._AdditionalCommand = value;
					this.SendPropertyChanged("AdditionalCommand");
					this.OnAdditionalCommandChanged();
				}
			}
		}
		
		[Column(Storage="_ReportingTo", DbType="NVarChar(500)")]
		public string ReportingTo
		{
			get
			{
				return this._ReportingTo;
			}
			set
			{
				if ((this._ReportingTo != value))
				{
					this.OnReportingToChanging(value);
					this.SendPropertyChanging();
					this._ReportingTo = value;
					this.SendPropertyChanged("ReportingTo");
					this.OnReportingToChanged();
				}
			}
		}
		
		[Association(Name="Channel_MappingRule", Storage="_MappingRules", ThisKey="ChannelId", OtherKey="ChannelId")]
		public EntitySet<MappingRule> MappingRules
		{
			get
			{
				return this._MappingRules;
			}
			set
			{
				this._MappingRules.Assign(value);
			}
		}
		
		[Association(Name="Channel_Excluded", Storage="_Excludeds", ThisKey="ChannelId", OtherKey="ChannelId")]
		public EntitySet<Excluded> Excludeds
		{
			get
			{
				return this._Excludeds;
			}
			set
			{
				this._Excludeds.Assign(value);
			}
		}
		
		[Association(Name="Channel_ImportLog", Storage="_ImportLogs", ThisKey="ChannelId", OtherKey="ChannelId")]
		public EntitySet<ImportLog> ImportLogs
		{
			get
			{
				return this._ImportLogs;
			}
			set
			{
				this._ImportLogs.Assign(value);
			}
		}
		
		[Association(Name="Channel_ProductsLog", Storage="_ProductsLogs", ThisKey="ChannelId", OtherKey="ChannelId")]
		public EntitySet<ProductsLog> ProductsLogs
		{
			get
			{
				return this._ProductsLogs;
			}
			set
			{
				this._ProductsLogs.Assign(value);
			}
		}
		
		[Association(Name="Channel_ManualImportQueue", Storage="_ManualImportQueues", ThisKey="ChannelId", OtherKey="ChannelId")]
		public EntitySet<ManualImportQueue> ManualImportQueues
		{
			get
			{
				return this._ManualImportQueues;
			}
			set
			{
				this._ManualImportQueues.Assign(value);
			}
		}
		
		[Association(Name="Channel_ChannelMonitor", Storage="_ChannelMonitors", ThisKey="ChannelId", OtherKey="ChannelId")]
		public EntitySet<ChannelMonitor> ChannelMonitors
		{
			get
			{
				return this._ChannelMonitors;
			}
			set
			{
				this._ChannelMonitors.Assign(value);
			}
		}
		
		[Association(Name="Enum_Channel", Storage="_Enum", ThisKey="ChannelType", OtherKey="EnumId", IsForeignKey=true)]
		public Enum Enum
		{
			get
			{
				return this._Enum.Entity;
			}
			set
			{
				Enum previousValue = this._Enum.Entity;
				if (((previousValue != value) 
							|| (this._Enum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enum.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Enum.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._ChannelType = value.EnumId;
					}
					else
					{
						this._ChannelType = default(int);
					}
					this.SendPropertyChanged("Enum");
				}
			}
		}
		
		[Association(Name="Enum_Channel1", Storage="_Enum1", ThisKey="InfoType", OtherKey="EnumId", IsForeignKey=true)]
		public Enum Enum1
		{
			get
			{
				return this._Enum1.Entity;
			}
			set
			{
				Enum previousValue = this._Enum1.Entity;
				if (((previousValue != value) 
							|| (this._Enum1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enum1.Entity = null;
						previousValue.Channels1.Remove(this);
					}
					this._Enum1.Entity = value;
					if ((value != null))
					{
						value.Channels1.Add(this);
						this._InfoType = value.EnumId;
					}
					else
					{
						this._InfoType = default(int);
					}
					this.SendPropertyChanged("Enum1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MappingRules(MappingRule entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_MappingRules(MappingRule entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
		
		private void attach_Excludeds(Excluded entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_Excludeds(Excluded entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
		
		private void attach_ImportLogs(ImportLog entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_ImportLogs(ImportLog entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
		
		private void attach_ProductsLogs(ProductsLog entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_ProductsLogs(ProductsLog entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
		
		private void attach_ManualImportQueues(ManualImportQueue entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_ManualImportQueues(ManualImportQueue entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
		
		private void attach_ChannelMonitors(ChannelMonitor entity)
		{
			this.SendPropertyChanging();
			entity.Channel = this;
		}
		
		private void detach_ChannelMonitors(ChannelMonitor entity)
		{
			this.SendPropertyChanging();
			entity.Channel = null;
		}
	}
	
	[Table(Name="dbo.DistributorType")]
	public partial class DistributorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FileAs;
		
		private EntitySet<Distributor> _Distributors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    #endregion
		
		public DistributorType()
		{
			this._Distributors = new EntitySet<Distributor>(new Action<Distributor>(this.attach_Distributors), new Action<Distributor>(this.detach_Distributors));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		[Association(Name="DistributorType_Distributor", Storage="_Distributors", ThisKey="ID", OtherKey="IDDistributorType")]
		public EntitySet<Distributor> Distributors
		{
			get
			{
				return this._Distributors;
			}
			set
			{
				this._Distributors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Distributors(Distributor entity)
		{
			this.SendPropertyChanging();
			entity.DistributorType = this;
		}
		
		private void detach_Distributors(Distributor entity)
		{
			this.SendPropertyChanging();
			entity.DistributorType = null;
		}
	}
	
	[Table(Name="dbo.ImportDistributor")]
	public partial class ImportDistributor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDDistributor;
		
		private int _IDUser;
		
		private System.DateTime _DateImported;
		
		private string _FileName;
		
		private System.DateTime _DateFrom;
		
		private System.DateTime _DateTo;
		
		private System.Nullable<bool> _IsDeleted;
		
		private bool _Succeeded;
		
		private string _ErrorMessage;
		
		private EntitySet<ImportDistributorRecord> _ImportDistributorRecords;
		
		private EntityRef<Distributor> _Distributor;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDDistributorChanging(int value);
    partial void OnIDDistributorChanged();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnDateImportedChanging(System.DateTime value);
    partial void OnDateImportedChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnDateFromChanging(System.DateTime value);
    partial void OnDateFromChanged();
    partial void OnDateToChanging(System.DateTime value);
    partial void OnDateToChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnSucceededChanging(bool value);
    partial void OnSucceededChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public ImportDistributor()
		{
			this._ImportDistributorRecords = new EntitySet<ImportDistributorRecord>(new Action<ImportDistributorRecord>(this.attach_ImportDistributorRecords), new Action<ImportDistributorRecord>(this.detach_ImportDistributorRecords));
			this._Distributor = default(EntityRef<Distributor>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDDistributor", DbType="Int NOT NULL")]
		public int IDDistributor
		{
			get
			{
				return this._IDDistributor;
			}
			set
			{
				if ((this._IDDistributor != value))
				{
					if (this._Distributor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDistributorChanging(value);
					this.SendPropertyChanging();
					this._IDDistributor = value;
					this.SendPropertyChanged("IDDistributor");
					this.OnIDDistributorChanged();
				}
			}
		}
		
		[Column(Storage="_IDUser", DbType="Int NOT NULL")]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[Column(Storage="_DateImported", DbType="DateTime NOT NULL")]
		public System.DateTime DateImported
		{
			get
			{
				return this._DateImported;
			}
			set
			{
				if ((this._DateImported != value))
				{
					this.OnDateImportedChanging(value);
					this.SendPropertyChanging();
					this._DateImported = value;
					this.SendPropertyChanged("DateImported");
					this.OnDateImportedChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateFrom", DbType="DateTime NOT NULL")]
		public System.DateTime DateFrom
		{
			get
			{
				return this._DateFrom;
			}
			set
			{
				if ((this._DateFrom != value))
				{
					this.OnDateFromChanging(value);
					this.SendPropertyChanging();
					this._DateFrom = value;
					this.SendPropertyChanged("DateFrom");
					this.OnDateFromChanged();
				}
			}
		}
		
		[Column(Storage="_DateTo", DbType="DateTime NOT NULL")]
		public System.DateTime DateTo
		{
			get
			{
				return this._DateTo;
			}
			set
			{
				if ((this._DateTo != value))
				{
					this.OnDateToChanging(value);
					this.SendPropertyChanging();
					this._DateTo = value;
					this.SendPropertyChanged("DateTo");
					this.OnDateToChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_Succeeded", DbType="Bit NOT NULL")]
		public bool Succeeded
		{
			get
			{
				return this._Succeeded;
			}
			set
			{
				if ((this._Succeeded != value))
				{
					this.OnSucceededChanging(value);
					this.SendPropertyChanging();
					this._Succeeded = value;
					this.SendPropertyChanged("Succeeded");
					this.OnSucceededChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorMessage", DbType="NVarChar(MAX)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[Association(Name="ImportDistributor_ImportDistributorRecord", Storage="_ImportDistributorRecords", ThisKey="ID", OtherKey="IDImportDistributor")]
		public EntitySet<ImportDistributorRecord> ImportDistributorRecords
		{
			get
			{
				return this._ImportDistributorRecords;
			}
			set
			{
				this._ImportDistributorRecords.Assign(value);
			}
		}
		
		[Association(Name="Distributor_ImportDistributor", Storage="_Distributor", ThisKey="IDDistributor", OtherKey="ID", IsForeignKey=true)]
		public Distributor Distributor
		{
			get
			{
				return this._Distributor.Entity;
			}
			set
			{
				Distributor previousValue = this._Distributor.Entity;
				if (((previousValue != value) 
							|| (this._Distributor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Distributor.Entity = null;
						previousValue.ImportDistributors.Remove(this);
					}
					this._Distributor.Entity = value;
					if ((value != null))
					{
						value.ImportDistributors.Add(this);
						this._IDDistributor = value.ID;
					}
					else
					{
						this._IDDistributor = default(int);
					}
					this.SendPropertyChanged("Distributor");
				}
			}
		}
		
		[Association(Name="User_ImportDistributor", Storage="_User", ThisKey="IDUser", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ImportDistributors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ImportDistributors.Add(this);
						this._IDUser = value.UserId;
					}
					else
					{
						this._IDUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImportDistributorRecords(ImportDistributorRecord entity)
		{
			this.SendPropertyChanging();
			entity.ImportDistributor = this;
		}
		
		private void detach_ImportDistributorRecords(ImportDistributorRecord entity)
		{
			this.SendPropertyChanging();
			entity.ImportDistributor = null;
		}
	}
	
	[Table(Name="dbo.ImportDistributorRecord")]
	public partial class ImportDistributorRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDImportDistributor;
		
		private System.DateTime _Date;
		
		private long _ResellerIdentificationNumber;
		
		private string _ResellerName;
		
		private string _ProductCode;
		
		private string _ProductName;
		
		private int _Quantity;
		
		private decimal _UnitPrice;
		
		private EntityRef<ImportDistributor> _ImportDistributor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDImportDistributorChanging(int value);
    partial void OnIDImportDistributorChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnResellerIdentificationNumberChanging(long value);
    partial void OnResellerIdentificationNumberChanged();
    partial void OnResellerNameChanging(string value);
    partial void OnResellerNameChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public ImportDistributorRecord()
		{
			this._ImportDistributor = default(EntityRef<ImportDistributor>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDImportDistributor", DbType="Int NOT NULL")]
		public int IDImportDistributor
		{
			get
			{
				return this._IDImportDistributor;
			}
			set
			{
				if ((this._IDImportDistributor != value))
				{
					if (this._ImportDistributor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDImportDistributorChanging(value);
					this.SendPropertyChanging();
					this._IDImportDistributor = value;
					this.SendPropertyChanged("IDImportDistributor");
					this.OnIDImportDistributorChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ResellerIdentificationNumber", DbType="BigInt NOT NULL")]
		public long ResellerIdentificationNumber
		{
			get
			{
				return this._ResellerIdentificationNumber;
			}
			set
			{
				if ((this._ResellerIdentificationNumber != value))
				{
					this.OnResellerIdentificationNumberChanging(value);
					this.SendPropertyChanging();
					this._ResellerIdentificationNumber = value;
					this.SendPropertyChanged("ResellerIdentificationNumber");
					this.OnResellerIdentificationNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ResellerName", DbType="NVarChar(500)")]
		public string ResellerName
		{
			get
			{
				return this._ResellerName;
			}
			set
			{
				if ((this._ResellerName != value))
				{
					this.OnResellerNameChanging(value);
					this.SendPropertyChanging();
					this._ResellerName = value;
					this.SendPropertyChanged("ResellerName");
					this.OnResellerNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(500)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Association(Name="ImportDistributor_ImportDistributorRecord", Storage="_ImportDistributor", ThisKey="IDImportDistributor", OtherKey="ID", IsForeignKey=true)]
		public ImportDistributor ImportDistributor
		{
			get
			{
				return this._ImportDistributor.Entity;
			}
			set
			{
				ImportDistributor previousValue = this._ImportDistributor.Entity;
				if (((previousValue != value) 
							|| (this._ImportDistributor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImportDistributor.Entity = null;
						previousValue.ImportDistributorRecords.Remove(this);
					}
					this._ImportDistributor.Entity = value;
					if ((value != null))
					{
						value.ImportDistributorRecords.Add(this);
						this._IDImportDistributor = value.ID;
					}
					else
					{
						this._IDImportDistributor = default(int);
					}
					this.SendPropertyChanged("ImportDistributor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ImportPriceList")]
	public partial class ImportPriceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDUser;
		
		private string _FileName;
		
		private System.DateTime _DateImported;
		
		private bool _Succeeded;
		
		private string _ErrorMessage;
		
		private EntitySet<ImportPriceListRecord> _ImportPriceListRecords;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnDateImportedChanging(System.DateTime value);
    partial void OnDateImportedChanged();
    partial void OnSucceededChanging(bool value);
    partial void OnSucceededChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public ImportPriceList()
		{
			this._ImportPriceListRecords = new EntitySet<ImportPriceListRecord>(new Action<ImportPriceListRecord>(this.attach_ImportPriceListRecords), new Action<ImportPriceListRecord>(this.detach_ImportPriceListRecords));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDUser", DbType="Int NOT NULL")]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateImported", DbType="DateTime NOT NULL")]
		public System.DateTime DateImported
		{
			get
			{
				return this._DateImported;
			}
			set
			{
				if ((this._DateImported != value))
				{
					this.OnDateImportedChanging(value);
					this.SendPropertyChanging();
					this._DateImported = value;
					this.SendPropertyChanged("DateImported");
					this.OnDateImportedChanged();
				}
			}
		}
		
		[Column(Storage="_Succeeded", DbType="Bit NOT NULL")]
		public bool Succeeded
		{
			get
			{
				return this._Succeeded;
			}
			set
			{
				if ((this._Succeeded != value))
				{
					this.OnSucceededChanging(value);
					this.SendPropertyChanging();
					this._Succeeded = value;
					this.SendPropertyChanged("Succeeded");
					this.OnSucceededChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorMessage", DbType="NVarChar(MAX)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[Association(Name="ImportPriceList_ImportPriceListRecord", Storage="_ImportPriceListRecords", ThisKey="ID", OtherKey="IDImportPriceList")]
		public EntitySet<ImportPriceListRecord> ImportPriceListRecords
		{
			get
			{
				return this._ImportPriceListRecords;
			}
			set
			{
				this._ImportPriceListRecords.Assign(value);
			}
		}
		
		[Association(Name="User_ImportPriceList", Storage="_User", ThisKey="IDUser", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ImportPriceLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ImportPriceLists.Add(this);
						this._IDUser = value.UserId;
					}
					else
					{
						this._IDUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImportPriceListRecords(ImportPriceListRecord entity)
		{
			this.SendPropertyChanging();
			entity.ImportPriceList = this;
		}
		
		private void detach_ImportPriceListRecords(ImportPriceListRecord entity)
		{
			this.SendPropertyChanging();
			entity.ImportPriceList = null;
		}
	}
	
	[Table(Name="dbo.ResellerGroup")]
	public partial class ResellerGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FileAs;
		
		private string _Code;
		
		private bool _IsDeleted;
		
		private EntitySet<Reseller> _Resellers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public ResellerGroup()
		{
			this._Resellers = new EntitySet<Reseller>(new Action<Reseller>(this.attach_Resellers), new Action<Reseller>(this.detach_Resellers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="ResellerGroup_Reseller", Storage="_Resellers", ThisKey="ID", OtherKey="IDResellerGroup")]
		public EntitySet<Reseller> Resellers
		{
			get
			{
				return this._Resellers;
			}
			set
			{
				this._Resellers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Resellers(Reseller entity)
		{
			this.SendPropertyChanging();
			entity.ResellerGroup = this;
		}
		
		private void detach_Resellers(Reseller entity)
		{
			this.SendPropertyChanging();
			entity.ResellerGroup = null;
		}
	}
	
	[Table(Name="dbo.Reseller")]
	public partial class Reseller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDResellerGroup;
		
		private int _IDCountry;
		
		private string _FileAs;
		
		private long _IdentificationNumber;
		
		private string _Code;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _ModifiedBy;
		
		private EntityRef<ResellerGroup> _ResellerGroup;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDResellerGroupChanging(int value);
    partial void OnIDResellerGroupChanged();
    partial void OnIDCountryChanging(int value);
    partial void OnIDCountryChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    partial void OnIdentificationNumberChanging(long value);
    partial void OnIdentificationNumberChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Reseller()
		{
			this._ResellerGroup = default(EntityRef<ResellerGroup>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDResellerGroup", DbType="Int NOT NULL")]
		public int IDResellerGroup
		{
			get
			{
				return this._IDResellerGroup;
			}
			set
			{
				if ((this._IDResellerGroup != value))
				{
					if (this._ResellerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDResellerGroupChanging(value);
					this.SendPropertyChanging();
					this._IDResellerGroup = value;
					this.SendPropertyChanged("IDResellerGroup");
					this.OnIDResellerGroupChanged();
				}
			}
		}
		
		[Column(Storage="_IDCountry", DbType="Int NOT NULL")]
		public int IDCountry
		{
			get
			{
				return this._IDCountry;
			}
			set
			{
				if ((this._IDCountry != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCountryChanging(value);
					this.SendPropertyChanging();
					this._IDCountry = value;
					this.SendPropertyChanged("IDCountry");
					this.OnIDCountryChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		[Column(Storage="_IdentificationNumber", DbType="BigInt NOT NULL")]
		public long IdentificationNumber
		{
			get
			{
				return this._IdentificationNumber;
			}
			set
			{
				if ((this._IdentificationNumber != value))
				{
					this.OnIdentificationNumberChanging(value);
					this.SendPropertyChanging();
					this._IdentificationNumber = value;
					this.SendPropertyChanged("IdentificationNumber");
					this.OnIdentificationNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Association(Name="ResellerGroup_Reseller", Storage="_ResellerGroup", ThisKey="IDResellerGroup", OtherKey="ID", IsForeignKey=true)]
		public ResellerGroup ResellerGroup
		{
			get
			{
				return this._ResellerGroup.Entity;
			}
			set
			{
				ResellerGroup previousValue = this._ResellerGroup.Entity;
				if (((previousValue != value) 
							|| (this._ResellerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResellerGroup.Entity = null;
						previousValue.Resellers.Remove(this);
					}
					this._ResellerGroup.Entity = value;
					if ((value != null))
					{
						value.Resellers.Add(this);
						this._IDResellerGroup = value.ID;
					}
					else
					{
						this._IDResellerGroup = default(int);
					}
					this.SendPropertyChanged("ResellerGroup");
				}
			}
		}
		
		[Association(Name="Country_Reseller", Storage="_Country", ThisKey="IDCountry", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Resellers.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Resellers.Add(this);
						this._IDCountry = value.ID;
					}
					else
					{
						this._IDCountry = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FileAs;
		
		private string _Code;
		
		private EntitySet<Reseller> _Resellers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public Country()
		{
			this._Resellers = new EntitySet<Reseller>(new Action<Reseller>(this.attach_Resellers), new Action<Reseller>(this.detach_Resellers));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Association(Name="Country_Reseller", Storage="_Resellers", ThisKey="ID", OtherKey="IDCountry")]
		public EntitySet<Reseller> Resellers
		{
			get
			{
				return this._Resellers;
			}
			set
			{
				this._Resellers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Resellers(Reseller entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Resellers(Reseller entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.ImportReseller")]
	public partial class ImportReseller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDUser;
		
		private string _FileName;
		
		private System.DateTime _DateImported;
		
		private bool _Succeeded;
		
		private string _ErrorMessage;
		
		private EntitySet<ImportResellerRecord> _ImportResellerRecords;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnDateImportedChanging(System.DateTime value);
    partial void OnDateImportedChanged();
    partial void OnSucceededChanging(bool value);
    partial void OnSucceededChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public ImportReseller()
		{
			this._ImportResellerRecords = new EntitySet<ImportResellerRecord>(new Action<ImportResellerRecord>(this.attach_ImportResellerRecords), new Action<ImportResellerRecord>(this.detach_ImportResellerRecords));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDUser", DbType="Int NOT NULL")]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateImported", DbType="DateTime NOT NULL")]
		public System.DateTime DateImported
		{
			get
			{
				return this._DateImported;
			}
			set
			{
				if ((this._DateImported != value))
				{
					this.OnDateImportedChanging(value);
					this.SendPropertyChanging();
					this._DateImported = value;
					this.SendPropertyChanged("DateImported");
					this.OnDateImportedChanged();
				}
			}
		}
		
		[Column(Storage="_Succeeded", DbType="Bit NOT NULL")]
		public bool Succeeded
		{
			get
			{
				return this._Succeeded;
			}
			set
			{
				if ((this._Succeeded != value))
				{
					this.OnSucceededChanging(value);
					this.SendPropertyChanging();
					this._Succeeded = value;
					this.SendPropertyChanged("Succeeded");
					this.OnSucceededChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorMessage", DbType="NVarChar(MAX)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[Association(Name="ImportReseller_ImportResellerRecord", Storage="_ImportResellerRecords", ThisKey="ID", OtherKey="IDImportReseller")]
		public EntitySet<ImportResellerRecord> ImportResellerRecords
		{
			get
			{
				return this._ImportResellerRecords;
			}
			set
			{
				this._ImportResellerRecords.Assign(value);
			}
		}
		
		[Association(Name="User_ImportReseller", Storage="_User", ThisKey="IDUser", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ImportResellers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ImportResellers.Add(this);
						this._IDUser = value.UserId;
					}
					else
					{
						this._IDUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImportResellerRecords(ImportResellerRecord entity)
		{
			this.SendPropertyChanging();
			entity.ImportReseller = this;
		}
		
		private void detach_ImportResellerRecords(ImportResellerRecord entity)
		{
			this.SendPropertyChanging();
			entity.ImportReseller = null;
		}
	}
	
	[Table(Name="dbo.ProductGroup")]
	public partial class ProductGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _FileAs;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    #endregion
		
		public ProductGroup()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		[Association(Name="ProductGroup_Product", Storage="_Products", ThisKey="ID", OtherKey="IDProductGroup")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup = null;
		}
	}
	
	[Table(Name="dbo.Distributor")]
	public partial class Distributor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDDistributorType;
		
		private string _FileAs;
		
		private string _Note;
		
		private bool _ShowInImports;
		
		private bool _ShowInReports;
		
		private bool _IsDeleted;
		
		private EntitySet<ImportDistributor> _ImportDistributors;
		
		private EntityRef<DistributorType> _DistributorType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDDistributorTypeChanging(int value);
    partial void OnIDDistributorTypeChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnShowInImportsChanging(bool value);
    partial void OnShowInImportsChanged();
    partial void OnShowInReportsChanging(bool value);
    partial void OnShowInReportsChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Distributor()
		{
			this._ImportDistributors = new EntitySet<ImportDistributor>(new Action<ImportDistributor>(this.attach_ImportDistributors), new Action<ImportDistributor>(this.detach_ImportDistributors));
			this._DistributorType = default(EntityRef<DistributorType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDDistributorType", DbType="Int NOT NULL")]
		public int IDDistributorType
		{
			get
			{
				return this._IDDistributorType;
			}
			set
			{
				if ((this._IDDistributorType != value))
				{
					if (this._DistributorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDistributorTypeChanging(value);
					this.SendPropertyChanging();
					this._IDDistributorType = value;
					this.SendPropertyChanged("IDDistributorType");
					this.OnIDDistributorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_ShowInImports", DbType="Bit NOT NULL")]
		public bool ShowInImports
		{
			get
			{
				return this._ShowInImports;
			}
			set
			{
				if ((this._ShowInImports != value))
				{
					this.OnShowInImportsChanging(value);
					this.SendPropertyChanging();
					this._ShowInImports = value;
					this.SendPropertyChanged("ShowInImports");
					this.OnShowInImportsChanged();
				}
			}
		}
		
		[Column(Storage="_ShowInReports", DbType="Bit NOT NULL")]
		public bool ShowInReports
		{
			get
			{
				return this._ShowInReports;
			}
			set
			{
				if ((this._ShowInReports != value))
				{
					this.OnShowInReportsChanging(value);
					this.SendPropertyChanging();
					this._ShowInReports = value;
					this.SendPropertyChanged("ShowInReports");
					this.OnShowInReportsChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Distributor_ImportDistributor", Storage="_ImportDistributors", ThisKey="ID", OtherKey="IDDistributor")]
		public EntitySet<ImportDistributor> ImportDistributors
		{
			get
			{
				return this._ImportDistributors;
			}
			set
			{
				this._ImportDistributors.Assign(value);
			}
		}
		
		[Association(Name="DistributorType_Distributor", Storage="_DistributorType", ThisKey="IDDistributorType", OtherKey="ID", IsForeignKey=true)]
		public DistributorType DistributorType
		{
			get
			{
				return this._DistributorType.Entity;
			}
			set
			{
				DistributorType previousValue = this._DistributorType.Entity;
				if (((previousValue != value) 
							|| (this._DistributorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DistributorType.Entity = null;
						previousValue.Distributors.Remove(this);
					}
					this._DistributorType.Entity = value;
					if ((value != null))
					{
						value.Distributors.Add(this);
						this._IDDistributorType = value.ID;
					}
					else
					{
						this._IDDistributorType = default(int);
					}
					this.SendPropertyChanged("DistributorType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImportDistributors(ImportDistributor entity)
		{
			this.SendPropertyChanging();
			entity.Distributor = this;
		}
		
		private void detach_ImportDistributors(ImportDistributor entity)
		{
			this.SendPropertyChanging();
			entity.Distributor = null;
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _FullName;
		
		private string _Password;
		
		private string _Email;
		
		private bool _IsDailyEmail;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private bool _IsActive;
		
		private System.Nullable<bool> _IsForbidden;
		
		private EntitySet<UsersCategory> _UsersCategories;
		
		private EntitySet<RecommendedPrice> _RecommendedPrices;
		
		private EntitySet<UsersRight> _UsersRights;
		
		private EntitySet<ProductsLog> _ProductsLogs;
		
		private EntitySet<RecommendedLog> _RecommendedLogs;
		
		private EntitySet<ManualImportQueue> _ManualImportQueues;
		
		private EntitySet<ImportDistributor> _ImportDistributors;
		
		private EntitySet<ImportPriceList> _ImportPriceLists;
		
		private EntitySet<ImportReseller> _ImportResellers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsDailyEmailChanging(bool value);
    partial void OnIsDailyEmailChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsForbiddenChanging(System.Nullable<bool> value);
    partial void OnIsForbiddenChanged();
    #endregion
		
		public User()
		{
			this._UsersCategories = new EntitySet<UsersCategory>(new Action<UsersCategory>(this.attach_UsersCategories), new Action<UsersCategory>(this.detach_UsersCategories));
			this._RecommendedPrices = new EntitySet<RecommendedPrice>(new Action<RecommendedPrice>(this.attach_RecommendedPrices), new Action<RecommendedPrice>(this.detach_RecommendedPrices));
			this._UsersRights = new EntitySet<UsersRight>(new Action<UsersRight>(this.attach_UsersRights), new Action<UsersRight>(this.detach_UsersRights));
			this._ProductsLogs = new EntitySet<ProductsLog>(new Action<ProductsLog>(this.attach_ProductsLogs), new Action<ProductsLog>(this.detach_ProductsLogs));
			this._RecommendedLogs = new EntitySet<RecommendedLog>(new Action<RecommendedLog>(this.attach_RecommendedLogs), new Action<RecommendedLog>(this.detach_RecommendedLogs));
			this._ManualImportQueues = new EntitySet<ManualImportQueue>(new Action<ManualImportQueue>(this.attach_ManualImportQueues), new Action<ManualImportQueue>(this.detach_ManualImportQueues));
			this._ImportDistributors = new EntitySet<ImportDistributor>(new Action<ImportDistributor>(this.attach_ImportDistributors), new Action<ImportDistributor>(this.detach_ImportDistributors));
			this._ImportPriceLists = new EntitySet<ImportPriceList>(new Action<ImportPriceList>(this.attach_ImportPriceLists), new Action<ImportPriceList>(this.detach_ImportPriceLists));
			this._ImportResellers = new EntitySet<ImportReseller>(new Action<ImportReseller>(this.attach_ImportResellers), new Action<ImportReseller>(this.detach_ImportResellers));
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IsDailyEmail", DbType="Bit NOT NULL")]
		public bool IsDailyEmail
		{
			get
			{
				return this._IsDailyEmail;
			}
			set
			{
				if ((this._IsDailyEmail != value))
				{
					this.OnIsDailyEmailChanging(value);
					this.SendPropertyChanging();
					this._IsDailyEmail = value;
					this.SendPropertyChanged("IsDailyEmail");
					this.OnIsDailyEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsForbidden", DbType="Bit")]
		public System.Nullable<bool> IsForbidden
		{
			get
			{
				return this._IsForbidden;
			}
			set
			{
				if ((this._IsForbidden != value))
				{
					this.OnIsForbiddenChanging(value);
					this.SendPropertyChanging();
					this._IsForbidden = value;
					this.SendPropertyChanged("IsForbidden");
					this.OnIsForbiddenChanged();
				}
			}
		}
		
		[Association(Name="User_UsersCategory", Storage="_UsersCategories", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UsersCategory> UsersCategories
		{
			get
			{
				return this._UsersCategories;
			}
			set
			{
				this._UsersCategories.Assign(value);
			}
		}
		
		[Association(Name="User_RecommendedPrice", Storage="_RecommendedPrices", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<RecommendedPrice> RecommendedPrices
		{
			get
			{
				return this._RecommendedPrices;
			}
			set
			{
				this._RecommendedPrices.Assign(value);
			}
		}
		
		[Association(Name="User_UsersRight", Storage="_UsersRights", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UsersRight> UsersRights
		{
			get
			{
				return this._UsersRights;
			}
			set
			{
				this._UsersRights.Assign(value);
			}
		}
		
		[Association(Name="User_ProductsLog", Storage="_ProductsLogs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ProductsLog> ProductsLogs
		{
			get
			{
				return this._ProductsLogs;
			}
			set
			{
				this._ProductsLogs.Assign(value);
			}
		}
		
		[Association(Name="User_RecommendedLog", Storage="_RecommendedLogs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<RecommendedLog> RecommendedLogs
		{
			get
			{
				return this._RecommendedLogs;
			}
			set
			{
				this._RecommendedLogs.Assign(value);
			}
		}
		
		[Association(Name="User_ManualImportQueue", Storage="_ManualImportQueues", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ManualImportQueue> ManualImportQueues
		{
			get
			{
				return this._ManualImportQueues;
			}
			set
			{
				this._ManualImportQueues.Assign(value);
			}
		}
		
		[Association(Name="User_ImportDistributor", Storage="_ImportDistributors", ThisKey="UserId", OtherKey="IDUser")]
		public EntitySet<ImportDistributor> ImportDistributors
		{
			get
			{
				return this._ImportDistributors;
			}
			set
			{
				this._ImportDistributors.Assign(value);
			}
		}
		
		[Association(Name="User_ImportPriceList", Storage="_ImportPriceLists", ThisKey="UserId", OtherKey="IDUser")]
		public EntitySet<ImportPriceList> ImportPriceLists
		{
			get
			{
				return this._ImportPriceLists;
			}
			set
			{
				this._ImportPriceLists.Assign(value);
			}
		}
		
		[Association(Name="User_ImportReseller", Storage="_ImportResellers", ThisKey="UserId", OtherKey="IDUser")]
		public EntitySet<ImportReseller> ImportResellers
		{
			get
			{
				return this._ImportResellers;
			}
			set
			{
				this._ImportResellers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersCategories(UsersCategory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersCategories(UsersCategory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecommendedPrices(RecommendedPrice entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecommendedPrices(RecommendedPrice entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersRights(UsersRight entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersRights(UsersRight entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ProductsLogs(ProductsLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProductsLogs(ProductsLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecommendedLogs(RecommendedLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecommendedLogs(RecommendedLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ManualImportQueues(ManualImportQueue entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ManualImportQueues(ManualImportQueue entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ImportDistributors(ImportDistributor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ImportDistributors(ImportDistributor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ImportPriceLists(ImportPriceList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ImportPriceLists(ImportPriceList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ImportResellers(ImportReseller entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ImportResellers(ImportReseller entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.ImportResellerRecord")]
	public partial class ImportResellerRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDImportReseller;
		
		private string _FileAs;
		
		private long _IdentificationNumber;
		
		private string _ResellerGroupCode;
		
		private string _CountryCode;
		
		private EntityRef<ImportReseller> _ImportReseller;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDImportResellerChanging(int value);
    partial void OnIDImportResellerChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    partial void OnIdentificationNumberChanging(long value);
    partial void OnIdentificationNumberChanged();
    partial void OnResellerGroupCodeChanging(string value);
    partial void OnResellerGroupCodeChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    #endregion
		
		public ImportResellerRecord()
		{
			this._ImportReseller = default(EntityRef<ImportReseller>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDImportReseller", DbType="Int NOT NULL")]
		public int IDImportReseller
		{
			get
			{
				return this._IDImportReseller;
			}
			set
			{
				if ((this._IDImportReseller != value))
				{
					if (this._ImportReseller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDImportResellerChanging(value);
					this.SendPropertyChanging();
					this._IDImportReseller = value;
					this.SendPropertyChanged("IDImportReseller");
					this.OnIDImportResellerChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		[Column(Storage="_IdentificationNumber", DbType="BigInt NOT NULL")]
		public long IdentificationNumber
		{
			get
			{
				return this._IdentificationNumber;
			}
			set
			{
				if ((this._IdentificationNumber != value))
				{
					this.OnIdentificationNumberChanging(value);
					this.SendPropertyChanging();
					this._IdentificationNumber = value;
					this.SendPropertyChanged("IdentificationNumber");
					this.OnIdentificationNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ResellerGroupCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ResellerGroupCode
		{
			get
			{
				return this._ResellerGroupCode;
			}
			set
			{
				if ((this._ResellerGroupCode != value))
				{
					this.OnResellerGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._ResellerGroupCode = value;
					this.SendPropertyChanged("ResellerGroupCode");
					this.OnResellerGroupCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Association(Name="ImportReseller_ImportResellerRecord", Storage="_ImportReseller", ThisKey="IDImportReseller", OtherKey="ID", IsForeignKey=true)]
		public ImportReseller ImportReseller
		{
			get
			{
				return this._ImportReseller.Entity;
			}
			set
			{
				ImportReseller previousValue = this._ImportReseller.Entity;
				if (((previousValue != value) 
							|| (this._ImportReseller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImportReseller.Entity = null;
						previousValue.ImportResellerRecords.Remove(this);
					}
					this._ImportReseller.Entity = value;
					if ((value != null))
					{
						value.ImportResellerRecords.Add(this);
						this._IDImportReseller = value.ID;
					}
					else
					{
						this._IDImportReseller = default(int);
					}
					this.SendPropertyChanged("ImportReseller");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductType")]
	public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public ProductType()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="ProductType_Product", Storage="_Products", ThisKey="ID", OtherKey="IDProductType")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
	}
	
	[Table(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private System.Nullable<int> _IDProductGroup;
		
		private string _ProductCode;
		
		private string _ProductName;
		
		private System.Nullable<int> _CategoryId;
		
		private decimal _CurrentPrice;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<int> _IDProductType;
		
		private EntitySet<ProductsRelevance> _ProductsRelevances;
		
		private EntitySet<RecommendedPrice> _RecommendedPrices;
		
		private EntitySet<MappingRule> _MappingRules;
		
		private EntitySet<Excluded> _Excludeds;
		
		private EntitySet<ProductsLog> _ProductsLogs;
		
		private EntitySet<RecommendedLog> _RecommendedLogs;
		
		private EntitySet<MainMonitor> _MainMonitors;
		
		private EntitySet<ChannelMonitor> _ChannelMonitors;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<ProductGroup> _ProductGroup;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnIDProductGroupChanging(System.Nullable<int> value);
    partial void OnIDProductGroupChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnCurrentPriceChanging(decimal value);
    partial void OnCurrentPriceChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnIDProductTypeChanging(System.Nullable<int> value);
    partial void OnIDProductTypeChanged();
    #endregion
		
		public Product()
		{
			this._ProductsRelevances = new EntitySet<ProductsRelevance>(new Action<ProductsRelevance>(this.attach_ProductsRelevances), new Action<ProductsRelevance>(this.detach_ProductsRelevances));
			this._RecommendedPrices = new EntitySet<RecommendedPrice>(new Action<RecommendedPrice>(this.attach_RecommendedPrices), new Action<RecommendedPrice>(this.detach_RecommendedPrices));
			this._MappingRules = new EntitySet<MappingRule>(new Action<MappingRule>(this.attach_MappingRules), new Action<MappingRule>(this.detach_MappingRules));
			this._Excludeds = new EntitySet<Excluded>(new Action<Excluded>(this.attach_Excludeds), new Action<Excluded>(this.detach_Excludeds));
			this._ProductsLogs = new EntitySet<ProductsLog>(new Action<ProductsLog>(this.attach_ProductsLogs), new Action<ProductsLog>(this.detach_ProductsLogs));
			this._RecommendedLogs = new EntitySet<RecommendedLog>(new Action<RecommendedLog>(this.attach_RecommendedLogs), new Action<RecommendedLog>(this.detach_RecommendedLogs));
			this._MainMonitors = new EntitySet<MainMonitor>(new Action<MainMonitor>(this.attach_MainMonitors), new Action<MainMonitor>(this.detach_MainMonitors));
			this._ChannelMonitors = new EntitySet<ChannelMonitor>(new Action<ChannelMonitor>(this.attach_ChannelMonitors), new Action<ChannelMonitor>(this.detach_ChannelMonitors));
			this._Category = default(EntityRef<Category>);
			this._ProductGroup = default(EntityRef<ProductGroup>);
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[Column(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_IDProductGroup", DbType="Int")]
		public System.Nullable<int> IDProductGroup
		{
			get
			{
				return this._IDProductGroup;
			}
			set
			{
				if ((this._IDProductGroup != value))
				{
					if (this._ProductGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProductGroupChanging(value);
					this.SendPropertyChanging();
					this._IDProductGroup = value;
					this.SendPropertyChanged("IDProductGroup");
					this.OnIDProductGroupChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal CurrentPrice
		{
			get
			{
				return this._CurrentPrice;
			}
			set
			{
				if ((this._CurrentPrice != value))
				{
					this.OnCurrentPriceChanging(value);
					this.SendPropertyChanging();
					this._CurrentPrice = value;
					this.SendPropertyChanged("CurrentPrice");
					this.OnCurrentPriceChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IDProductType", DbType="Int")]
		public System.Nullable<int> IDProductType
		{
			get
			{
				return this._IDProductType;
			}
			set
			{
				if ((this._IDProductType != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProductTypeChanging(value);
					this.SendPropertyChanging();
					this._IDProductType = value;
					this.SendPropertyChanged("IDProductType");
					this.OnIDProductTypeChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductsRelevance", Storage="_ProductsRelevances", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductsRelevance> ProductsRelevances
		{
			get
			{
				return this._ProductsRelevances;
			}
			set
			{
				this._ProductsRelevances.Assign(value);
			}
		}
		
		[Association(Name="Product_RecommendedPrice", Storage="_RecommendedPrices", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<RecommendedPrice> RecommendedPrices
		{
			get
			{
				return this._RecommendedPrices;
			}
			set
			{
				this._RecommendedPrices.Assign(value);
			}
		}
		
		[Association(Name="Product_MappingRule", Storage="_MappingRules", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<MappingRule> MappingRules
		{
			get
			{
				return this._MappingRules;
			}
			set
			{
				this._MappingRules.Assign(value);
			}
		}
		
		[Association(Name="Product_Excluded", Storage="_Excludeds", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<Excluded> Excludeds
		{
			get
			{
				return this._Excludeds;
			}
			set
			{
				this._Excludeds.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductsLog", Storage="_ProductsLogs", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductsLog> ProductsLogs
		{
			get
			{
				return this._ProductsLogs;
			}
			set
			{
				this._ProductsLogs.Assign(value);
			}
		}
		
		[Association(Name="Product_RecommendedLog", Storage="_RecommendedLogs", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<RecommendedLog> RecommendedLogs
		{
			get
			{
				return this._RecommendedLogs;
			}
			set
			{
				this._RecommendedLogs.Assign(value);
			}
		}
		
		[Association(Name="Product_MainMonitor", Storage="_MainMonitors", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<MainMonitor> MainMonitors
		{
			get
			{
				return this._MainMonitors;
			}
			set
			{
				this._MainMonitors.Assign(value);
			}
		}
		
		[Association(Name="Product_ChannelMonitor", Storage="_ChannelMonitors", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ChannelMonitor> ChannelMonitors
		{
			get
			{
				return this._ChannelMonitors;
			}
			set
			{
				this._ChannelMonitors.Assign(value);
			}
		}
		
		[Association(Name="Category_Product", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true, DeleteRule="SET NULL")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="ProductGroup_Product", Storage="_ProductGroup", ThisKey="IDProductGroup", OtherKey="ID", IsForeignKey=true)]
		public ProductGroup ProductGroup
		{
			get
			{
				return this._ProductGroup.Entity;
			}
			set
			{
				ProductGroup previousValue = this._ProductGroup.Entity;
				if (((previousValue != value) 
							|| (this._ProductGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductGroup.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductGroup.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IDProductGroup = value.ID;
					}
					else
					{
						this._IDProductGroup = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductGroup");
				}
			}
		}
		
		[Association(Name="ProductType_Product", Storage="_ProductType", ThisKey="IDProductType", OtherKey="ID", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._IDProductType = value.ID;
					}
					else
					{
						this._IDProductType = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductsRelevances(ProductsRelevance entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductsRelevances(ProductsRelevance entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_RecommendedPrices(RecommendedPrice entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_RecommendedPrices(RecommendedPrice entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_MappingRules(MappingRule entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_MappingRules(MappingRule entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Excludeds(Excluded entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Excludeds(Excluded entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductsLogs(ProductsLog entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductsLogs(ProductsLog entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_RecommendedLogs(RecommendedLog entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_RecommendedLogs(RecommendedLog entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_MainMonitors(MainMonitor entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_MainMonitors(MainMonitor entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ChannelMonitors(ChannelMonitor entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ChannelMonitors(ChannelMonitor entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.ImportPriceListRecord")]
	public partial class ImportPriceListRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDImportPriceList;
		
		private string _ProductName;
		
		private string _ProductCode;
		
		private string _ProductCategory;
		
		private decimal _ListPrice;
		
		private string _ProductType;
		
		private EntityRef<ImportPriceList> _ImportPriceList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDImportPriceListChanging(int value);
    partial void OnIDImportPriceListChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnProductCategoryChanging(string value);
    partial void OnProductCategoryChanged();
    partial void OnListPriceChanging(decimal value);
    partial void OnListPriceChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    #endregion
		
		public ImportPriceListRecord()
		{
			this._ImportPriceList = default(EntityRef<ImportPriceList>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDImportPriceList", DbType="Int NOT NULL")]
		public int IDImportPriceList
		{
			get
			{
				return this._IDImportPriceList;
			}
			set
			{
				if ((this._IDImportPriceList != value))
				{
					if (this._ImportPriceList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDImportPriceListChanging(value);
					this.SendPropertyChanging();
					this._IDImportPriceList = value;
					this.SendPropertyChanged("IDImportPriceList");
					this.OnIDImportPriceListChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCategory", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ProductCategory
		{
			get
			{
				return this._ProductCategory;
			}
			set
			{
				if ((this._ProductCategory != value))
				{
					this.OnProductCategoryChanging(value);
					this.SendPropertyChanging();
					this._ProductCategory = value;
					this.SendPropertyChanged("ProductCategory");
					this.OnProductCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_ListPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal ListPrice
		{
			get
			{
				return this._ListPrice;
			}
			set
			{
				if ((this._ListPrice != value))
				{
					this.OnListPriceChanging(value);
					this.SendPropertyChanging();
					this._ListPrice = value;
					this.SendPropertyChanged("ListPrice");
					this.OnListPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Association(Name="ImportPriceList_ImportPriceListRecord", Storage="_ImportPriceList", ThisKey="IDImportPriceList", OtherKey="ID", IsForeignKey=true)]
		public ImportPriceList ImportPriceList
		{
			get
			{
				return this._ImportPriceList.Entity;
			}
			set
			{
				ImportPriceList previousValue = this._ImportPriceList.Entity;
				if (((previousValue != value) 
							|| (this._ImportPriceList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImportPriceList.Entity = null;
						previousValue.ImportPriceListRecords.Remove(this);
					}
					this._ImportPriceList.Entity = value;
					if ((value != null))
					{
						value.ImportPriceListRecords.Add(this);
						this._IDImportPriceList = value.ID;
					}
					else
					{
						this._IDImportPriceList = default(int);
					}
					this.SendPropertyChanged("ImportPriceList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetBestRelevanceForMappingResult
	{
		
		private int _ProductId;
		
		private int _ChannelMonitorId;
		
		private decimal _RelevancePercent;
		
		public GetBestRelevanceForMappingResult()
		{
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this._ProductId = value;
				}
			}
		}
		
		[Column(Storage="_ChannelMonitorId", DbType="Int NOT NULL")]
		public int ChannelMonitorId
		{
			get
			{
				return this._ChannelMonitorId;
			}
			set
			{
				if ((this._ChannelMonitorId != value))
				{
					this._ChannelMonitorId = value;
				}
			}
		}
		
		[Column(Storage="_RelevancePercent", DbType="Decimal(0,0) NOT NULL")]
		public decimal RelevancePercent
		{
			get
			{
				return this._RelevancePercent;
			}
			set
			{
				if ((this._RelevancePercent != value))
				{
					this._RelevancePercent = value;
				}
			}
		}
	}
	
	public partial class GetLastActualizationByChannelResult
	{
		
		private System.DateTime _ImportDate;
		
		public GetLastActualizationByChannelResult()
		{
		}
		
		[Column(Storage="_ImportDate", DbType="DateTime NOT NULL")]
		public System.DateTime ImportDate
		{
			get
			{
				return this._ImportDate;
			}
			set
			{
				if ((this._ImportDate != value))
				{
					this._ImportDate = value;
				}
			}
		}
	}
	
	public partial class GetProductImportLogResult
	{
		
		private System.Nullable<System.DateTime> _LogDate;
		
		private string _FullName;
		
		public GetProductImportLogResult()
		{
		}
		
		[Column(Storage="_LogDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this._LogDate = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
	}
	
	public partial class GetMainLogByDateResult
	{
		
		private int _LogId;
		
		private int _ChannelId;
		
		private string _ChannelName;
		
		private string _NameEn;
		
		private string _NameCz;
		
		private string _ChannelTypeEn;
		
		private string _ChannelTypeCz;
		
		private System.Nullable<int> _Tryed;
		
		private System.Nullable<int> _Success;
		
		private int _LogType;
		
		public GetMainLogByDateResult()
		{
		}
		
		[Column(Storage="_LogId", DbType="Int NOT NULL")]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this._LogId = value;
				}
			}
		}
		
		[Column(Storage="_ChannelId", DbType="Int NOT NULL")]
		public int ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this._ChannelId = value;
				}
			}
		}
		
		[Column(Storage="_ChannelName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChannelName
		{
			get
			{
				return this._ChannelName;
			}
			set
			{
				if ((this._ChannelName != value))
				{
					this._ChannelName = value;
				}
			}
		}
		
		[Column(Storage="_NameEn", DbType="NVarChar(50)")]
		public string NameEn
		{
			get
			{
				return this._NameEn;
			}
			set
			{
				if ((this._NameEn != value))
				{
					this._NameEn = value;
				}
			}
		}
		
		[Column(Storage="_NameCz", DbType="NVarChar(50)")]
		public string NameCz
		{
			get
			{
				return this._NameCz;
			}
			set
			{
				if ((this._NameCz != value))
				{
					this._NameCz = value;
				}
			}
		}
		
		[Column(Storage="_ChannelTypeEn", DbType="NVarChar(50)")]
		public string ChannelTypeEn
		{
			get
			{
				return this._ChannelTypeEn;
			}
			set
			{
				if ((this._ChannelTypeEn != value))
				{
					this._ChannelTypeEn = value;
				}
			}
		}
		
		[Column(Storage="_ChannelTypeCz", DbType="NVarChar(50)")]
		public string ChannelTypeCz
		{
			get
			{
				return this._ChannelTypeCz;
			}
			set
			{
				if ((this._ChannelTypeCz != value))
				{
					this._ChannelTypeCz = value;
				}
			}
		}
		
		[Column(Storage="_Tryed", DbType="Int")]
		public System.Nullable<int> Tryed
		{
			get
			{
				return this._Tryed;
			}
			set
			{
				if ((this._Tryed != value))
				{
					this._Tryed = value;
				}
			}
		}
		
		[Column(Storage="_Success", DbType="Int")]
		public System.Nullable<int> Success
		{
			get
			{
				return this._Success;
			}
			set
			{
				if ((this._Success != value))
				{
					this._Success = value;
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="Int NOT NULL")]
		public int LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this._LogType = value;
				}
			}
		}
	}
	
	public partial class GetMappingByChannelResult
	{
		
		private System.Nullable<int> _ProductState;
		
		private int _ProductId;
		
		private string _ProductEan;
		
		private string _ProductName;
		
		private string _Actual;
		
		private string _Recommended;
		
		public GetMappingByChannelResult()
		{
		}
		
		[Column(Storage="_ProductState", DbType="Int")]
		public System.Nullable<int> ProductState
		{
			get
			{
				return this._ProductState;
			}
			set
			{
				if ((this._ProductState != value))
				{
					this._ProductState = value;
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this._ProductId = value;
				}
			}
		}
		
		[Column(Storage="_ProductEan", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductEan
		{
			get
			{
				return this._ProductEan;
			}
			set
			{
				if ((this._ProductEan != value))
				{
					this._ProductEan = value;
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[Column(Storage="_Actual", DbType="NVarChar(1054)")]
		public string Actual
		{
			get
			{
				return this._Actual;
			}
			set
			{
				if ((this._Actual != value))
				{
					this._Actual = value;
				}
			}
		}
		
		[Column(Storage="_Recommended", DbType="NVarChar(1054)")]
		public string Recommended
		{
			get
			{
				return this._Recommended;
			}
			set
			{
				if ((this._Recommended != value))
				{
					this._Recommended = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
